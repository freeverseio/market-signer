{
  "contractName": "IPaymentsERC20",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "BuyerRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "eip712address",
          "type": "address"
        }
      ],
      "name": "EIP712",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "NewSeller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "PayIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "PaymentWindow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "registerAsSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "paymentId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeBPS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "universeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct ISignableStructs.PaymentInput",
          "name": "payInput",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "buyerSignature",
          "type": "bytes"
        }
      ],
      "name": "relayedPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "paymentId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeBPS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "universeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct ISignableStructs.PaymentInput",
          "name": "payInput",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "operatorSignature",
          "type": "bytes"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "paymentId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "wasSuccessful",
              "type": "bool"
            }
          ],
          "internalType": "struct ISignableStructs.AssetTransferResult",
          "name": "transferResult",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "operatorSignature",
          "type": "bytes"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "paymentId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "wasSuccessful",
              "type": "bool"
            }
          ],
          "internalType": "struct ISignableStructs.AssetTransferResult",
          "name": "transferResult",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "operatorSignature",
          "type": "bytes"
        }
      ],
      "name": "finalizeAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "refundAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSellerRegistrationRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isRegisteredSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "erc20BalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "paymentInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IPaymentsERC20.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feesCollector",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeBPS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymentsERC20.Payment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "paymentState",
      "outputs": [
        {
          "internalType": "enum IPaymentsERC20.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "acceptsRefunds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedCurrency",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "enoughFundsAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "maxFundsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitFundingSources",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "externalFunds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "localFunds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "paymentId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeBPS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "universeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct ISignableStructs.PaymentInput",
          "name": "payInput",
          "type": "tuple"
        }
      ],
      "name": "checkPaymentInputs",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeBPS",
          "type": "uint256"
        }
      ],
      "name": "computeFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BuyerRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eip712address\",\"type\":\"address\"}],\"name\":\"EIP712\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"NewSeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"PayIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"PaymentWindow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedCurrency\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"acceptsRefunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"universeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct ISignableStructs.PaymentInput\",\"name\":\"payInput\",\"type\":\"tuple\"}],\"name\":\"checkPaymentInputs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBPS\",\"type\":\"uint256\"}],\"name\":\"computeFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enoughFundsAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"wasSuccessful\",\"type\":\"bool\"}],\"internalType\":\"struct ISignableStructs.AssetTransferResult\",\"name\":\"transferResult\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"operatorSignature\",\"type\":\"bytes\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"wasSuccessful\",\"type\":\"bool\"}],\"internalType\":\"struct ISignableStructs.AssetTransferResult\",\"name\":\"transferResult\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"operatorSignature\",\"type\":\"bytes\"}],\"name\":\"finalizeAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegisteredSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSellerRegistrationRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"maxFundsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"universeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct ISignableStructs.PaymentInput\",\"name\":\"payInput\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"operatorSignature\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"paymentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IPaymentsERC20.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feesCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymentsERC20.Payment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"paymentState\",\"outputs\":[{\"internalType\":\"enum IPaymentsERC20.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"refundAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAsSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"universeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct ISignableStructs.PaymentInput\",\"name\":\"payInput\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"buyerSignature\",\"type\":\"bytes\"}],\"name\":\"relayedPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitFundingSources\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"externalFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"localFunds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Freeverse.io, www.freeverse.io\",\"details\":\"Upon transfer of ERC20 tokens to this contract, these remain locked until an Operator confirms the success or failure of the asset transfer required to fulfil this payment. If no confirmation is received from the operator during the PaymentWindow, all tokens received from the buyer are made available to the buyer for refund. To start a payment, one of the following two methods needs to be called: - in the 'pay' method, the buyer is the msg.sender (the buyer therefore signs the TX),   and the operator's EIP712-signature of the PaymentInput struct is provided as input to the call. - in the 'relayedPay' method, the operator is the msg.sender (the operator therefore signs the TX),   and the buyer's EIP712-signature of the PaymentInput struct is provided as input to the call. This contract maintains the balances of all users, it does not transfer them automatically. Users need to explicitly call the 'withdraw' method, which withdraws balanceOf[msg.sender] If a buyer has a non-zero local balance at the moment of starting a new payment, the contract reuses it, and only transfers the remainder required (if any) from the external ERC20 contract. Each payment has the following State Machine: - NOT_STARTED -> ASSET_TRANSFERRING, triggered by pay/relayedPay - ASSET_TRANSFERRING -> PAID, triggered by relaying assetTransferSuccess signed by operator - ASSET_TRANSFERRING -> REFUNDED, triggered by relaying assetTransferFailed signed by operator - ASSET_TRANSFERRING -> REFUNDED, triggered by a refund request after expirationTime NOTE: To ensure that the payment process proceeds as expected when the payment starts, upon acceptance of a pay/relayedPay, the following data: {operator, feesCollector, expirationTime} is stored in the payment struct, and used throughout the payment, regardless of any possible modifications to the contract's storage.\",\"events\":{\"BuyerRefunded(bytes32,address)\":{\"details\":\"Event emitted when a buyer is refunded for a given payment process\",\"params\":{\"buyer\":\"The address of the refunded buyer\",\"paymentId\":\"The id of the already initiated payment \"}},\"EIP712(address)\":{\"details\":\"Event emitted on change of EIP712 verifier contract address\",\"params\":{\"eip712address\":\"The address of the new EIP712 verifier contract\"}},\"NewSeller(address)\":{\"details\":\"Event emitted when a user executes the registerAsSeller method\",\"params\":{\"seller\":\"The address of the newly registeredAsSeller user.\"}},\"Paid(bytes32)\":{\"details\":\"Event emitted when a payment process arrives at the PAID   final state, where the seller receives the funds.\",\"params\":{\"paymentId\":\"The id of the already initiated payment \"}},\"PayIn(bytes32,address,address)\":{\"details\":\"Event emitted when funds for a given payment arrive to this contract\",\"params\":{\"buyer\":\"The address of the buyer providing the funds\",\"paymentId\":\"The unique id identifying the payment \",\"seller\":\"The address of the seller of the asset\"}},\"PaymentWindow(uint256)\":{\"details\":\"Event emitted on change of payment window\",\"params\":{\"window\":\"The new amount of time after the arrival of a payment for which,   in absence of confirmation of asset transfer success, a buyer is allowed to refund\"}},\"Withdraw(address,uint256)\":{\"details\":\"Event emitted when user withdraws funds from this contract\",\"params\":{\"amount\":\"The amount withdrawn, in lowest units of the ERC20 token\",\"user\":\"The address of the user that withdraws\"}}},\"kind\":\"dev\",\"methods\":{\"EIP712Address()\":{\"returns\":{\"_0\":\"the address of the EIP712 verifier contract\"}},\"acceptedCurrency()\":{\"returns\":{\"_0\":\"the string describing the currency\"}},\"acceptsRefunds(bytes32)\":{\"details\":\"The payment must be in ASSET_TRANSFERRING and beyond expirationTime.\",\"params\":{\"paymentId\":\"The unique ID that identifies the payment.\"},\"returns\":{\"_0\":\"true if the payment accepts a refund to the buyer.\"}},\"allowance(address)\":{\"params\":{\"buyer\":\"the address of the buyer\"},\"returns\":{\"_0\":\"the amount allowed by buyer\"}},\"balanceOf(address)\":{\"params\":{\"addr\":\"the address that is queried\"},\"returns\":{\"_0\":\"the local balance\"}},\"checkPaymentInputs((bytes32,uint256,uint256,uint256,uint256,address,address))\":{\"params\":{\"payInput\":\"The PaymentInput struct\"}},\"computeFeeAmount(uint256,uint256)\":{\"details\":\"Must return a value that is guaranteed to be less or equal to the provided amount\",\"params\":{\"amount\":\"The amount\",\"feeBPS\":\"The percentage fee expressed in Basis Points (bps).  feeBPS examples:  2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps\"},\"returns\":{\"_0\":\"The fee amount\"}},\"enoughFundsAvailable(address,uint256)\":{\"details\":\"In more detail: returns true if the sum of the buyer's local balance in this contract,  plus funds available and approved in the ERC20 contract, are larger or equal than 'amount'\",\"params\":{\"amount\":\"The amount that is queried\",\"buyer\":\"The address for which funds are queried\"},\"returns\":{\"_0\":\"Returns true if enough funds are available\"}},\"erc20()\":{\"returns\":{\"_0\":\"the address of the ERC20 contract\"}},\"erc20BalanceOf(address)\":{\"params\":{\"addr\":\"the address that is queried\"},\"returns\":{\"_0\":\"the balance in the external ERC20 contract\"}},\"finalize((bytes32,bool),bytes)\":{\"details\":\"Can be executed by anyone, but the operator signature must be included as input param.  Seller or Buyer's balances are updated, allowing explicit withdrawal.  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\",\"params\":{\"operatorSignature\":\"The operator signature of result\",\"transferResult\":\"The asset transfer result struct signed by the operator.\"}},\"finalizeAndWithdraw((bytes32,bool),bytes)\":{\"details\":\"Can be executed by anyone, but the operator signature must be included as input param.  It is, however, expected to be executed by the seller, in case of a successful asset transfer,  or the buyer, in case of a failed asset transfer.  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\",\"params\":{\"operatorSignature\":\"The operator signature of result\",\"transferResult\":\"The asset transfer result struct signed by the operator.\"}},\"isRegisteredSeller(address)\":{\"params\":{\"addr\":\"the address that is queried\"},\"returns\":{\"_0\":\"Returns whether the address is registered as seller\"}},\"isSellerRegistrationRequired()\":{\"returns\":{\"_0\":\"Returns true if sellers need to be registered to be able to accept payments\"}},\"maxFundsAvailable(address)\":{\"details\":\"In more detail: returns the sum of the buyer's local balance in this contract,  plus the funds available and approved in the ERC20 contract.\",\"params\":{\"buyer\":\"The address for which funds are queried\"},\"returns\":{\"_0\":\"the max funds available\"}},\"pay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)\":{\"details\":\"Executed by the buyer, who relays the MetaTX with the operator's signature.  The buyer must have approved the amount to this contract before.  If all requirements are fulfilled, it stores the data relevant  for the next steps of the payment, and it locks the ERC20  in this contract.  Follows standard Checks-Effects-Interactions pattern  to protect against re-entrancy attacks.  Moves payment to ASSET_TRANSFERRING state.\",\"params\":{\"operatorSignature\":\"The signature of 'payInput' by the operator\",\"payInput\":\"The struct containing all required payment data\"}},\"paymentInfo(bytes32)\":{\"params\":{\"paymentId\":\"The unique ID that identifies the payment.\"},\"returns\":{\"_0\":\"the struct stored for the payment\"}},\"paymentState(bytes32)\":{\"details\":\"If payment is in ASSET_TRANSFERRING, it may be worth  checking acceptsRefunds to check if it has gone beyond expirationTime.\",\"params\":{\"paymentId\":\"The unique ID that identifies the payment.\"},\"returns\":{\"_0\":\"the state of the payment.\"}},\"paymentWindow()\":{\"returns\":{\"_0\":\"the payment window in secs\"}},\"refund(bytes32)\":{\"details\":\"Anybody can call this function.  Requires acceptsRefunds == true to proceed.  After updating buyer's balance, he/she can later withdraw.  Moves payment to REFUNDED state.\",\"params\":{\"paymentId\":\"The unique ID that identifies the payment.\"}},\"refundAndWithdraw(bytes32)\":{\"details\":\"Anybody can call this function.  Requires acceptsRefunds == true to proceed.  All of msg.sender's balance in the contract is withdrawn,  not only the part that was locked in this particular paymentId  Moves payment to REFUNDED state.\",\"params\":{\"paymentId\":\"The unique ID that identifies the payment.\"}},\"relayedPay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)\":{\"details\":\"Executed by an operator, who relays the MetaTX with the buyer's signature.  The buyer must have approved the amount to this contract before.  If all requirements are fulfilled, it stores the data relevant  for the next steps of the payment, and it locks the ERC20  in this contract.  Follows standard Checks-Effects-Interactions pattern  to protect against re-entrancy attacks.  Moves payment to ASSET_TRANSFERRING state.\",\"params\":{\"buyerSignature\":\"The signature of 'payInput' by the buyer\",\"payInput\":\"The struct containing all required payment data\"}},\"splitFundingSources(address,uint256)\":{\"params\":{\"amount\":\"The amount to be split\",\"buyer\":\"The address for which the amount is to be split\"},\"returns\":{\"externalFunds\":\"The amount of ERC20 required from the external ERC20 contract.\",\"localFunds\":\"The amount of ERC20 local funds required.\"}},\"withdrawAmount(uint256)\":{\"params\":{\"amount\":\"The required amount to withdraw\"}}},\"title\":\"Interface to Payments Contract in ERC20.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EIP712Address()\":{\"notice\":\"Returns the address of the of the contract containing  the implementation of the EIP712 verifying functions\"},\"acceptedCurrency()\":{\"notice\":\"Returns a descriptor about the currency that this contract accepts\"},\"acceptsRefunds(bytes32)\":{\"notice\":\"Returns true if the payment accepts a refund to the buyer\"},\"allowance(address)\":{\"notice\":\"Returns the allowance that the buyer has approved  directly in the ERC20 contract in favour of this contract.\"},\"balanceOf(address)\":{\"notice\":\"Returns the local ERC20 balance of the provided address  that is stored in this contract, and hence, available for withdrawal.\"},\"checkPaymentInputs((bytes32,uint256,uint256,uint256,uint256,address,address))\":{\"notice\":\"Reverts unless the requirements for a PaymentInput that  are common to both pay and relayedPay are fulfilled.\"},\"computeFeeAmount(uint256,uint256)\":{\"notice\":\"Safe computation of fee amount for a provided amount, feeBPS pair\"},\"enoughFundsAvailable(address,uint256)\":{\"notice\":\"Returns true if the 'amount' required for a payment is available to this contract.\"},\"erc20()\":{\"notice\":\"Returns the address of the ERC20 contract from which  tokens are accepted for payments\"},\"erc20BalanceOf(address)\":{\"notice\":\"Returns the ERC20 balance of address in the ERC20 contract\"},\"finalize((bytes32,bool),bytes)\":{\"notice\":\"Relays the operator signature declaring that the asset transfer was successful or failed,  and updates balances of seller or buyer, respectively.\"},\"finalizeAndWithdraw((bytes32,bool),bytes)\":{\"notice\":\"Relays the operator signature declaring that the asset transfer was successful or failed,  updates balances of seller or buyer, respectively,  and proceeds to withdraw all funds in this contract available to msg.sender.\"},\"isRegisteredSeller(address)\":{\"notice\":\"Returns true if the address provided is a registered seller\"},\"isSellerRegistrationRequired()\":{\"notice\":\"Returns whether sellers need to be registered to be able to accept payments\"},\"maxFundsAvailable(address)\":{\"notice\":\"Returns the maximum amount of funds available to a buyer\"},\"pay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)\":{\"notice\":\"Starts Payment process directly by the buyer.\"},\"paymentInfo(bytes32)\":{\"notice\":\"Returns all data stored in a payment\"},\"paymentState(bytes32)\":{\"notice\":\"Returns the state of a payment.\"},\"paymentWindow()\":{\"notice\":\"Returns the amount of seconds that a payment  can remain in ASSET_TRANSFERRING state without positive  or negative confirmation by the operator\"},\"refund(bytes32)\":{\"notice\":\"Moves buyer's provided funds to buyer's balance.\"},\"refundAndWithdraw(bytes32)\":{\"notice\":\"Executes refund and withdraw in one transaction.\"},\"registerAsSeller()\":{\"notice\":\"Registers msg.sender as seller so that, if the contract has set  _isSellerRegistrationRequired = true, then payments will be accepted with  msg.sender as seller.\"},\"relayedPay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)\":{\"notice\":\"Starts the Payment process via relay-by-operator.\"},\"splitFundingSources(address,uint256)\":{\"notice\":\"Splits the funds required to pay 'amount' into two sources:  - externalFunds: the amount of ERC20 required to be transferred from the external ERC20 contract  - localFunds: the amount of ERC20 from the buyer's already available balance in this contract.\"},\"withdraw()\":{\"notice\":\"Transfers ERC20 avaliable in this  contract's balanceOf[msg.sender] to msg.sender\"},\"withdrawAmount(uint256)\":{\"notice\":\"Transfers only the specified ERC20 amount  from this contract's balanceOf[msg.sender] to msg.sender.  Reverts if balanceOf[msg.sender] < amount.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Payments/IPaymentsERC20.sol\":\"IPaymentsERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Payments/IPaymentsERC20.sol\":{\"keccak256\":\"0x3d47002c117c1e45d383241f4f94ac42bf0a4b7c337bd9c1a5d008b217b6f6aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22a8833ca88303785573bbcb756f30547a2e535a6a8b640849f645e0e9575112\",\"dweb:/ipfs/QmVcLMN6ubsiwoZbWwTXgrgiTemEtm5g7XjhiRbeV2Hc1q\"]},\"project:/contracts/Payments/ISignableStructs.sol\":{\"keccak256\":\"0x8417246f7623fbfe1b1535a42ae11b0b089c14beb9994126ed97bef71ca073a9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb81f10b1277d5aa69882fd244ef84dce422ba35e4f6da8e81c15507812e5f98\",\"dweb:/ipfs/QmYm2vz3N5jEnNfuCLXiboXErAYUB7PYhLWeYYvdNSC6op\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.12;\n\nimport \"./ISignableStructs.sol\";\n\n/**\n * @title Interface to Payments Contract in ERC20.\n * @author Freeverse.io, www.freeverse.io\n * @dev Upon transfer of ERC20 tokens to this contract, these remain\n * locked until an Operator confirms the success or failure of the\n * asset transfer required to fulfil this payment.\n *\n * If no confirmation is received from the operator during the PaymentWindow,\n * all tokens received from the buyer are made available to the buyer for refund.\n *\n * To start a payment, one of the following two methods needs to be called:\n * - in the 'pay' method, the buyer is the msg.sender (the buyer therefore signs the TX),\n *   and the operator's EIP712-signature of the PaymentInput struct is provided as input to the call.\n * - in the 'relayedPay' method, the operator is the msg.sender (the operator therefore signs the TX),\n *   and the buyer's EIP712-signature of the PaymentInput struct is provided as input to the call.\n *\n * This contract maintains the balances of all users, it does not transfer them automatically.\n * Users need to explicitly call the 'withdraw' method, which withdraws balanceOf[msg.sender]\n * If a buyer has a non-zero local balance at the moment of starting a new payment,\n * the contract reuses it, and only transfers the remainder required (if any)\n * from the external ERC20 contract.\n *\n * Each payment has the following State Machine:\n * - NOT_STARTED -> ASSET_TRANSFERRING, triggered by pay/relayedPay\n * - ASSET_TRANSFERRING -> PAID, triggered by relaying assetTransferSuccess signed by operator\n * - ASSET_TRANSFERRING -> REFUNDED, triggered by relaying assetTransferFailed signed by operator\n * - ASSET_TRANSFERRING -> REFUNDED, triggered by a refund request after expirationTime\n *\n * NOTE: To ensure that the payment process proceeds as expected when the payment starts,\n * upon acceptance of a pay/relayedPay, the following data: {operator, feesCollector, expirationTime}\n * is stored in the payment struct, and used throughout the payment, regardless of\n * any possible modifications to the contract's storage.\n *\n */\n\ninterface IPaymentsERC20 is ISignableStructs {\n    /**\n     * @dev Event emitted on change of EIP712 verifier contract address\n     * @param eip712address The address of the new EIP712 verifier contract\n     */\n\n    event EIP712(address eip712address);\n    /**\n     * @dev Event emitted on change of payment window\n     * @param window The new amount of time after the arrival of a payment for which, \n     *  in absence of confirmation of asset transfer success, a buyer is allowed to refund\n     */\n    event PaymentWindow(uint256 window);\n\n    /**\n     * @dev Event emitted when a user executes the registerAsSeller method\n     * @param seller The address of the newly registeredAsSeller user.\n     */\n    event NewSeller(address indexed seller);\n\n    /**\n     * @dev Event emitted when a buyer is refunded for a given payment process\n     * @param paymentId The id of the already initiated payment \n     * @param buyer The address of the refunded buyer\n     */\n    event BuyerRefunded(bytes32 indexed paymentId, address indexed buyer);\n\n    /**\n     * @dev Event emitted when funds for a given payment arrive to this contract\n     * @param paymentId The unique id identifying the payment \n     * @param buyer The address of the buyer providing the funds\n     * @param seller The address of the seller of the asset\n     */\n    event PayIn(\n        bytes32 indexed paymentId,\n        address indexed buyer,\n        address indexed seller\n    );\n\n    /**\n     * @dev Event emitted when a payment process arrives at the PAID \n     *  final state, where the seller receives the funds.\n     * @param paymentId The id of the already initiated payment \n     */\n    event Paid(bytes32 indexed paymentId);\n\n    /**\n     * @dev Event emitted when user withdraws funds from this contract\n     * @param user The address of the user that withdraws\n     * @param amount The amount withdrawn, in lowest units of the ERC20 token\n     */\n    event Withdraw(address indexed user, uint256 amount);\n\n    /**\n     * @dev The enum characterizing the possible states of a payment process\n     */\n    enum State {\n        NotStarted,\n        AssetTransferring,\n        Refunded,\n        Paid\n    }\n\n    /**\n     * @notice Main struct stored with every payment.\n     *  All variables of the struct remain immutable throughout a payment process\n     *  except for `state`.\n     */\n    struct Payment {\n        // the current state of the payment process\n        State state;\n\n        // the buyer, providing the required funds, who shall receive\n        // the asset on a successful payment.\n        address buyer;\n\n        // the seller of the asset, who shall receive the funds\n        // (subtracting fees) on a successful payment.        \n        address seller;\n\n        // The address of the operator of this payment\n        address operator;\n\n        // The address of the feesCollector of this payment\n        address feesCollector;\n\n        // The timestamp after which, in absence of confirmation of \n        // asset transfer success, a buyer is allowed to refund\n        uint256 expirationTime;\n\n        // the percentage fee expressed in Basis Points (bps), typical in finance\n        // Examples:  2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps\n        uint256 feeBPS;\n\n        // the price of the asset, an integer expressed in the\n        // lowest unit of the ERC20 token.\n        uint256 amount;\n    }\n\n    /**\n     * @notice Registers msg.sender as seller so that, if the contract has set\n     *  _isSellerRegistrationRequired = true, then payments will be accepted with\n     *  msg.sender as seller.\n     */\n    function registerAsSeller() external;\n\n    /**\n     * @notice Starts the Payment process via relay-by-operator.\n     * @dev Executed by an operator, who relays the MetaTX with the buyer's signature.\n     *  The buyer must have approved the amount to this contract before.\n     *  If all requirements are fulfilled, it stores the data relevant\n     *  for the next steps of the payment, and it locks the ERC20\n     *  in this contract.\n     *  Follows standard Checks-Effects-Interactions pattern\n     *  to protect against re-entrancy attacks.\n     *  Moves payment to ASSET_TRANSFERRING state.\n     * @param payInput The struct containing all required payment data\n     * @param buyerSignature The signature of 'payInput' by the buyer\n     */\n    function relayedPay(\n        PaymentInput calldata payInput,\n        bytes calldata buyerSignature\n    ) external;\n\n    /**\n     * @notice Starts Payment process directly by the buyer.\n     * @dev Executed by the buyer, who relays the MetaTX with the operator's signature.\n     *  The buyer must have approved the amount to this contract before.\n     *  If all requirements are fulfilled, it stores the data relevant\n     *  for the next steps of the payment, and it locks the ERC20\n     *  in this contract.\n     *  Follows standard Checks-Effects-Interactions pattern\n     *  to protect against re-entrancy attacks.\n     *  Moves payment to ASSET_TRANSFERRING state.\n     * @param payInput The struct containing all required payment data\n     * @param operatorSignature The signature of 'payInput' by the operator\n     */\n    function pay(PaymentInput calldata payInput, bytes calldata operatorSignature)\n        external;\n\n    /**\n     * @notice Relays the operator signature declaring that the asset transfer was successful or failed,\n     *  and updates balances of seller or buyer, respectively.\n     * @dev Can be executed by anyone, but the operator signature must be included as input param.\n     *  Seller or Buyer's balances are updated, allowing explicit withdrawal.\n     *  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\n     * @param transferResult The asset transfer result struct signed by the operator.\n     * @param operatorSignature The operator signature of result\n     */\n    function finalize(\n        AssetTransferResult calldata transferResult,\n        bytes calldata operatorSignature\n    ) external;\n\n    /**\n     * @notice Relays the operator signature declaring that the asset transfer was successful or failed,\n     *  updates balances of seller or buyer, respectively,\n     *  and proceeds to withdraw all funds in this contract available to msg.sender.\n     * @dev Can be executed by anyone, but the operator signature must be included as input param.\n     *  It is, however, expected to be executed by the seller, in case of a successful asset transfer,\n     *  or the buyer, in case of a failed asset transfer.\n     *  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\n     * @param transferResult The asset transfer result struct signed by the operator.\n     * @param operatorSignature The operator signature of result\n     */\n    function finalizeAndWithdraw(\n        AssetTransferResult calldata transferResult,\n        bytes calldata operatorSignature\n    ) external;\n\n    /**\n     * @notice Moves buyer's provided funds to buyer's balance.\n     * @dev Anybody can call this function.\n     *  Requires acceptsRefunds == true to proceed.\n     *  After updating buyer's balance, he/she can later withdraw.\n     *  Moves payment to REFUNDED state.\n     * @param paymentId The unique ID that identifies the payment.\n     */\n    function refund(bytes32 paymentId) external;\n\n    /**\n     * @notice Executes refund and withdraw in one transaction.\n     * @dev Anybody can call this function.\n     *  Requires acceptsRefunds == true to proceed.\n     *  All of msg.sender's balance in the contract is withdrawn,\n     *  not only the part that was locked in this particular paymentId\n     *  Moves payment to REFUNDED state.\n     * @param paymentId The unique ID that identifies the payment.\n     */\n    function refundAndWithdraw(bytes32 paymentId) external;\n\n    /**\n     * @notice Transfers ERC20 avaliable in this\n     *  contract's balanceOf[msg.sender] to msg.sender\n     */\n    function withdraw() external;\n\n    /**\n     * @notice Transfers only the specified ERC20 amount\n     *  from this contract's balanceOf[msg.sender] to msg.sender.\n     *  Reverts if balanceOf[msg.sender] < amount.\n     * @param amount The required amount to withdraw\n     */\n    function withdrawAmount(uint256 amount) external;\n\n    // VIEW FUNCTIONS\n\n    /**\n     * @notice Returns whether sellers need to be registered to be able to accept payments\n     * @return Returns true if sellers need to be registered to be able to accept payments\n     */\n    function isSellerRegistrationRequired() external view returns (bool);\n\n    /**\n     * @notice Returns true if the address provided is a registered seller\n     * @param addr the address that is queried\n     * @return Returns whether the address is registered as seller\n     */\n    function isRegisteredSeller(address addr) external view returns (bool);\n\n    /**\n     * @notice Returns the address of the ERC20 contract from which\n     *  tokens are accepted for payments\n     * @return the address of the ERC20 contract\n     */\n    function erc20() external view returns (address);\n\n    /**\n     * @notice Returns the local ERC20 balance of the provided address\n     *  that is stored in this contract, and hence, available for withdrawal.\n     * @param addr the address that is queried\n     * @return the local balance\n     */\n    function balanceOf(address addr) external view returns (uint256);\n\n    /**\n     * @notice Returns the ERC20 balance of address in the ERC20 contract\n     * @param addr the address that is queried\n     * @return the balance in the external ERC20 contract\n     */\n    function erc20BalanceOf(address addr) external view returns (uint256);\n\n    /**\n     * @notice Returns the allowance that the buyer has approved\n     *  directly in the ERC20 contract in favour of this contract.\n     * @param buyer the address of the buyer\n     * @return the amount allowed by buyer\n     */\n    function allowance(address buyer) external view returns (uint256);\n\n    /**\n     * @notice Returns all data stored in a payment\n     * @param paymentId The unique ID that identifies the payment.\n     * @return the struct stored for the payment\n     */\n    function paymentInfo(bytes32 paymentId)\n        external\n        view\n        returns (Payment memory);\n\n    /**\n     * @notice Returns the state of a payment.\n     * @dev If payment is in ASSET_TRANSFERRING, it may be worth\n     *  checking acceptsRefunds to check if it has gone beyond expirationTime.\n     * @param paymentId The unique ID that identifies the payment.\n     * @return the state of the payment.\n     */\n    function paymentState(bytes32 paymentId) external view returns (State);\n\n    /**\n     * @notice Returns true if the payment accepts a refund to the buyer\n     * @dev The payment must be in ASSET_TRANSFERRING and beyond expirationTime.\n     * @param paymentId The unique ID that identifies the payment.\n     * @return true if the payment accepts a refund to the buyer.\n     */\n    function acceptsRefunds(bytes32 paymentId) external view returns (bool);\n\n    /**\n     * @notice Returns the address of the of the contract containing\n     *  the implementation of the EIP712 verifying functions\n     * @return the address of the EIP712 verifier contract\n     */\n    function EIP712Address() external view returns (address);\n\n    /**\n     * @notice Returns the amount of seconds that a payment\n     *  can remain in ASSET_TRANSFERRING state without positive\n     *  or negative confirmation by the operator\n     * @return the payment window in secs\n     */\n    function paymentWindow() external view returns (uint256);\n\n    /**\n     * @notice Returns a descriptor about the currency that this contract accepts\n     * @return the string describing the currency\n     */\n    function acceptedCurrency() external view returns (string memory);\n\n    /**\n     * @notice Returns true if the 'amount' required for a payment is available to this contract.\n     * @dev In more detail: returns true if the sum of the buyer's local balance in this contract,\n     *  plus funds available and approved in the ERC20 contract, are larger or equal than 'amount'\n     * @param buyer The address for which funds are queried\n     * @param amount The amount that is queried\n     * @return Returns true if enough funds are available\n     */\n    function enoughFundsAvailable(address buyer, uint256 amount)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns the maximum amount of funds available to a buyer\n     * @dev In more detail: returns the sum of the buyer's local balance in this contract,\n     *  plus the funds available and approved in the ERC20 contract.\n     * @param buyer The address for which funds are queried\n     * @return the max funds available\n     */\n    function maxFundsAvailable(address buyer) external view returns (uint256);\n\n    /**\n     * @notice Splits the funds required to pay 'amount' into two sources:\n     *  - externalFunds: the amount of ERC20 required to be transferred from the external ERC20 contract\n     *  - localFunds: the amount of ERC20 from the buyer's already available balance in this contract.\n     * @param buyer The address for which the amount is to be split\n     * @param amount The amount to be split\n     * @return externalFunds The amount of ERC20 required from the external ERC20 contract.\n     * @return localFunds The amount of ERC20 local funds required.\n     */\n    function splitFundingSources(address buyer, uint256 amount)\n        external\n        view\n        returns (uint256 externalFunds, uint256 localFunds);\n\n    /**\n     * @notice Reverts unless the requirements for a PaymentInput that\n     *  are common to both pay and relayedPay are fulfilled.\n     * @param payInput The PaymentInput struct\n     */\n    function checkPaymentInputs(PaymentInput calldata payInput) external view;\n\n    // PURE FUNCTIONS\n\n    /**\n     * @notice Safe computation of fee amount for a provided amount, feeBPS pair\n     * @dev Must return a value that is guaranteed to be less or equal to the provided amount\n     * @param amount The amount\n     * @param feeBPS The percentage fee expressed in Basis Points (bps).\n     *  feeBPS examples:  2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps\n     * @return The fee amount\n     */\n    function computeFeeAmount(uint256 amount, uint256 feeBPS)\n        external\n        pure\n        returns (uint256);\n}\n",
  "sourcePath": "/Users/toni/gits/cryptoPayments/contracts/Payments/IPaymentsERC20.sol",
  "ast": {
    "absolutePath": "project:/contracts/Payments/IPaymentsERC20.sol",
    "exportedSymbols": {
      "IPaymentsERC20": [
        1640
      ],
      "ISignableStructs": [
        1664
      ]
    },
    "id": 1641,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1372,
        "literals": [
          "solidity",
          "=",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:12"
      },
      {
        "absolutePath": "project:/contracts/Payments/ISignableStructs.sol",
        "file": "./ISignableStructs.sol",
        "id": 1373,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1641,
        "sourceUnit": 1665,
        "src": "58:32:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1375,
              "name": "ISignableStructs",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1664,
              "src": "2175:16:12"
            },
            "id": 1376,
            "nodeType": "InheritanceSpecifier",
            "src": "2175:16:12"
          }
        ],
        "canonicalName": "IPaymentsERC20",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1374,
          "nodeType": "StructuredDocumentation",
          "src": "92:2053:12",
          "text": " @title Interface to Payments Contract in ERC20.\n @author Freeverse.io, www.freeverse.io\n @dev Upon transfer of ERC20 tokens to this contract, these remain\n locked until an Operator confirms the success or failure of the\n asset transfer required to fulfil this payment.\n If no confirmation is received from the operator during the PaymentWindow,\n all tokens received from the buyer are made available to the buyer for refund.\n To start a payment, one of the following two methods needs to be called:\n - in the 'pay' method, the buyer is the msg.sender (the buyer therefore signs the TX),\n   and the operator's EIP712-signature of the PaymentInput struct is provided as input to the call.\n - in the 'relayedPay' method, the operator is the msg.sender (the operator therefore signs the TX),\n   and the buyer's EIP712-signature of the PaymentInput struct is provided as input to the call.\n This contract maintains the balances of all users, it does not transfer them automatically.\n Users need to explicitly call the 'withdraw' method, which withdraws balanceOf[msg.sender]\n If a buyer has a non-zero local balance at the moment of starting a new payment,\n the contract reuses it, and only transfers the remainder required (if any)\n from the external ERC20 contract.\n Each payment has the following State Machine:\n - NOT_STARTED -> ASSET_TRANSFERRING, triggered by pay/relayedPay\n - ASSET_TRANSFERRING -> PAID, triggered by relaying assetTransferSuccess signed by operator\n - ASSET_TRANSFERRING -> REFUNDED, triggered by relaying assetTransferFailed signed by operator\n - ASSET_TRANSFERRING -> REFUNDED, triggered by a refund request after expirationTime\n NOTE: To ensure that the payment process proceeds as expected when the payment starts,\n upon acceptance of a pay/relayedPay, the following data: {operator, feesCollector, expirationTime}\n is stored in the payment struct, and used throughout the payment, regardless of\n any possible modifications to the contract's storage."
        },
        "fullyImplemented": false,
        "id": 1640,
        "linearizedBaseContracts": [
          1640,
          1664
        ],
        "name": "IPaymentsERC20",
        "nameLocation": "2157:14:12",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 1377,
              "nodeType": "StructuredDocumentation",
              "src": "2198:159:12",
              "text": " @dev Event emitted on change of EIP712 verifier contract address\n @param eip712address The address of the new EIP712 verifier contract"
            },
            "id": 1381,
            "name": "EIP712",
            "nameLocation": "2369:6:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1380,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1379,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "eip712address",
                  "nameLocation": "2384:13:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1381,
                  "src": "2376:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1378,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2376:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2375:23:12"
            },
            "src": "2363:36:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1382,
              "nodeType": "StructuredDocumentation",
              "src": "2404:243:12",
              "text": " @dev Event emitted on change of payment window\n @param window The new amount of time after the arrival of a payment for which, \n  in absence of confirmation of asset transfer success, a buyer is allowed to refund"
            },
            "id": 1386,
            "name": "PaymentWindow",
            "nameLocation": "2658:13:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1384,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "window",
                  "nameLocation": "2680:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1386,
                  "src": "2672:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1383,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2672:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2671:16:12"
            },
            "src": "2652:36:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1387,
              "nodeType": "StructuredDocumentation",
              "src": "2694:157:12",
              "text": " @dev Event emitted when a user executes the registerAsSeller method\n @param seller The address of the newly registeredAsSeller user."
            },
            "id": 1391,
            "name": "NewSeller",
            "nameLocation": "2862:9:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1389,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "seller",
                  "nameLocation": "2888:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1391,
                  "src": "2872:22:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1388,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2872:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2871:24:12"
            },
            "src": "2856:40:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1392,
              "nodeType": "StructuredDocumentation",
              "src": "2902:209:12",
              "text": " @dev Event emitted when a buyer is refunded for a given payment process\n @param paymentId The id of the already initiated payment \n @param buyer The address of the refunded buyer"
            },
            "id": 1398,
            "name": "BuyerRefunded",
            "nameLocation": "3122:13:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1397,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1394,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "3152:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1398,
                  "src": "3136:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1393,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3136:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1396,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "3179:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1398,
                  "src": "3163:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1395,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3163:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3135:50:12"
            },
            "src": "3116:70:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1399,
              "nodeType": "StructuredDocumentation",
              "src": "3192:280:12",
              "text": " @dev Event emitted when funds for a given payment arrive to this contract\n @param paymentId The unique id identifying the payment \n @param buyer The address of the buyer providing the funds\n @param seller The address of the seller of the asset"
            },
            "id": 1407,
            "name": "PayIn",
            "nameLocation": "3483:5:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1401,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "3514:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1407,
                  "src": "3498:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1400,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3498:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1403,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "3549:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1407,
                  "src": "3533:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1402,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3533:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1405,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "seller",
                  "nameLocation": "3580:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1407,
                  "src": "3564:22:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1404,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3564:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3488:104:12"
            },
            "src": "3477:116:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1408,
              "nodeType": "StructuredDocumentation",
              "src": "3599:204:12",
              "text": " @dev Event emitted when a payment process arrives at the PAID \n  final state, where the seller receives the funds.\n @param paymentId The id of the already initiated payment "
            },
            "id": 1412,
            "name": "Paid",
            "nameLocation": "3814:4:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1411,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1410,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "3835:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1412,
                  "src": "3819:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1409,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3819:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3818:27:12"
            },
            "src": "3808:38:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1413,
              "nodeType": "StructuredDocumentation",
              "src": "3852:218:12",
              "text": " @dev Event emitted when user withdraws funds from this contract\n @param user The address of the user that withdraws\n @param amount The amount withdrawn, in lowest units of the ERC20 token"
            },
            "id": 1419,
            "name": "Withdraw",
            "nameLocation": "4081:8:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1418,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1415,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "4106:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1419,
                  "src": "4090:20:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1414,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4090:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1417,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4120:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1419,
                  "src": "4112:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1416,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4112:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4089:38:12"
            },
            "src": "4075:53:12"
          },
          {
            "canonicalName": "IPaymentsERC20.State",
            "id": 1424,
            "members": [
              {
                "id": 1420,
                "name": "NotStarted",
                "nameLocation": "4248:10:12",
                "nodeType": "EnumValue",
                "src": "4248:10:12"
              },
              {
                "id": 1421,
                "name": "AssetTransferring",
                "nameLocation": "4268:17:12",
                "nodeType": "EnumValue",
                "src": "4268:17:12"
              },
              {
                "id": 1422,
                "name": "Refunded",
                "nameLocation": "4295:8:12",
                "nodeType": "EnumValue",
                "src": "4295:8:12"
              },
              {
                "id": 1423,
                "name": "Paid",
                "nameLocation": "4313:4:12",
                "nodeType": "EnumValue",
                "src": "4313:4:12"
              }
            ],
            "name": "State",
            "nameLocation": "4232:5:12",
            "nodeType": "EnumDefinition",
            "src": "4227:96:12"
          },
          {
            "canonicalName": "IPaymentsERC20.Payment",
            "id": 1442,
            "members": [
              {
                "constant": false,
                "id": 1427,
                "mutability": "mutable",
                "name": "state",
                "nameLocation": "4592:5:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4586:11:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_State_$1424",
                  "typeString": "enum IPaymentsERC20.State"
                },
                "typeName": {
                  "id": 1426,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1425,
                    "name": "State",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1424,
                    "src": "4586:5:12"
                  },
                  "referencedDeclaration": 1424,
                  "src": "4586:5:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$1424",
                    "typeString": "enum IPaymentsERC20.State"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1429,
                "mutability": "mutable",
                "name": "buyer",
                "nameLocation": "4732:5:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4724:13:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1428,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4724:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1431,
                "mutability": "mutable",
                "name": "seller",
                "nameLocation": "4883:6:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4875:14:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1430,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4875:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1433,
                "mutability": "mutable",
                "name": "operator",
                "nameLocation": "4963:8:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4955:16:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1432,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4955:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1435,
                "mutability": "mutable",
                "name": "feesCollector",
                "nameLocation": "5050:13:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5042:21:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1434,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "5042:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1437,
                "mutability": "mutable",
                "name": "expirationTime",
                "nameLocation": "5215:14:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5207:22:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1436,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5207:7:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1439,
                "mutability": "mutable",
                "name": "feeBPS",
                "nameLocation": "5401:6:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5393:14:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1438,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5393:7:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1441,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "5532:6:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5524:14:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1440,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5524:7:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Payment",
            "nameLocation": "4516:7:12",
            "nodeType": "StructDefinition",
            "scope": 1640,
            "src": "4509:1036:12",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 1443,
              "nodeType": "StructuredDocumentation",
              "src": "5551:202:12",
              "text": " @notice Registers msg.sender as seller so that, if the contract has set\n  _isSellerRegistrationRequired = true, then payments will be accepted with\n  msg.sender as seller."
            },
            "functionSelector": "128b8532",
            "id": 1446,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerAsSeller",
            "nameLocation": "5767:16:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5783:2:12"
            },
            "returnParameters": {
              "id": 1445,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5794:0:12"
            },
            "scope": 1640,
            "src": "5758:37:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1447,
              "nodeType": "StructuredDocumentation",
              "src": "5801:700:12",
              "text": " @notice Starts the Payment process via relay-by-operator.\n @dev Executed by an operator, who relays the MetaTX with the buyer's signature.\n  The buyer must have approved the amount to this contract before.\n  If all requirements are fulfilled, it stores the data relevant\n  for the next steps of the payment, and it locks the ERC20\n  in this contract.\n  Follows standard Checks-Effects-Interactions pattern\n  to protect against re-entrancy attacks.\n  Moves payment to ASSET_TRANSFERRING state.\n @param payInput The struct containing all required payment data\n @param buyerSignature The signature of 'payInput' by the buyer"
            },
            "functionSelector": "f7884d77",
            "id": 1455,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "relayedPay",
            "nameLocation": "6515:10:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1450,
                  "mutability": "mutable",
                  "name": "payInput",
                  "nameLocation": "6557:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "6535:30:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInput_$1658_calldata_ptr",
                    "typeString": "struct ISignableStructs.PaymentInput"
                  },
                  "typeName": {
                    "id": 1449,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1448,
                      "name": "PaymentInput",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1658,
                      "src": "6535:12:12"
                    },
                    "referencedDeclaration": 1658,
                    "src": "6535:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInput_$1658_storage_ptr",
                      "typeString": "struct ISignableStructs.PaymentInput"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1452,
                  "mutability": "mutable",
                  "name": "buyerSignature",
                  "nameLocation": "6590:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "6575:29:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1451,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "6575:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6525:85:12"
            },
            "returnParameters": {
              "id": 1454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6619:0:12"
            },
            "scope": 1640,
            "src": "6506:114:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1456,
              "nodeType": "StructuredDocumentation",
              "src": "6626:703:12",
              "text": " @notice Starts Payment process directly by the buyer.\n @dev Executed by the buyer, who relays the MetaTX with the operator's signature.\n  The buyer must have approved the amount to this contract before.\n  If all requirements are fulfilled, it stores the data relevant\n  for the next steps of the payment, and it locks the ERC20\n  in this contract.\n  Follows standard Checks-Effects-Interactions pattern\n  to protect against re-entrancy attacks.\n  Moves payment to ASSET_TRANSFERRING state.\n @param payInput The struct containing all required payment data\n @param operatorSignature The signature of 'payInput' by the operator"
            },
            "functionSelector": "23f7a900",
            "id": 1464,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pay",
            "nameLocation": "7343:3:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1459,
                  "mutability": "mutable",
                  "name": "payInput",
                  "nameLocation": "7369:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "7347:30:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInput_$1658_calldata_ptr",
                    "typeString": "struct ISignableStructs.PaymentInput"
                  },
                  "typeName": {
                    "id": 1458,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1457,
                      "name": "PaymentInput",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1658,
                      "src": "7347:12:12"
                    },
                    "referencedDeclaration": 1658,
                    "src": "7347:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInput_$1658_storage_ptr",
                      "typeString": "struct ISignableStructs.PaymentInput"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1461,
                  "mutability": "mutable",
                  "name": "operatorSignature",
                  "nameLocation": "7394:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "7379:32:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1460,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7379:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7346:66:12"
            },
            "returnParameters": {
              "id": 1463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7429:0:12"
            },
            "scope": 1640,
            "src": "7334:96:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1465,
              "nodeType": "StructuredDocumentation",
              "src": "7436:598:12",
              "text": " @notice Relays the operator signature declaring that the asset transfer was successful or failed,\n  and updates balances of seller or buyer, respectively.\n @dev Can be executed by anyone, but the operator signature must be included as input param.\n  Seller or Buyer's balances are updated, allowing explicit withdrawal.\n  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\n @param transferResult The asset transfer result struct signed by the operator.\n @param operatorSignature The operator signature of result"
            },
            "functionSelector": "96aa71b0",
            "id": 1473,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nameLocation": "8048:8:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1468,
                  "mutability": "mutable",
                  "name": "transferResult",
                  "nameLocation": "8095:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "8066:43:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AssetTransferResult_$1663_calldata_ptr",
                    "typeString": "struct ISignableStructs.AssetTransferResult"
                  },
                  "typeName": {
                    "id": 1467,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1466,
                      "name": "AssetTransferResult",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1663,
                      "src": "8066:19:12"
                    },
                    "referencedDeclaration": 1663,
                    "src": "8066:19:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AssetTransferResult_$1663_storage_ptr",
                      "typeString": "struct ISignableStructs.AssetTransferResult"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1470,
                  "mutability": "mutable",
                  "name": "operatorSignature",
                  "nameLocation": "8134:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "8119:32:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1469,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8119:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8056:101:12"
            },
            "returnParameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8166:0:12"
            },
            "scope": 1640,
            "src": "8039:128:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1474,
              "nodeType": "StructuredDocumentation",
              "src": "8173:762:12",
              "text": " @notice Relays the operator signature declaring that the asset transfer was successful or failed,\n  updates balances of seller or buyer, respectively,\n  and proceeds to withdraw all funds in this contract available to msg.sender.\n @dev Can be executed by anyone, but the operator signature must be included as input param.\n  It is, however, expected to be executed by the seller, in case of a successful asset transfer,\n  or the buyer, in case of a failed asset transfer.\n  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\n @param transferResult The asset transfer result struct signed by the operator.\n @param operatorSignature The operator signature of result"
            },
            "functionSelector": "a1bc474d",
            "id": 1482,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeAndWithdraw",
            "nameLocation": "8949:19:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1477,
                  "mutability": "mutable",
                  "name": "transferResult",
                  "nameLocation": "9007:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1482,
                  "src": "8978:43:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AssetTransferResult_$1663_calldata_ptr",
                    "typeString": "struct ISignableStructs.AssetTransferResult"
                  },
                  "typeName": {
                    "id": 1476,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1475,
                      "name": "AssetTransferResult",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1663,
                      "src": "8978:19:12"
                    },
                    "referencedDeclaration": 1663,
                    "src": "8978:19:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AssetTransferResult_$1663_storage_ptr",
                      "typeString": "struct ISignableStructs.AssetTransferResult"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1479,
                  "mutability": "mutable",
                  "name": "operatorSignature",
                  "nameLocation": "9046:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1482,
                  "src": "9031:32:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1478,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9031:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8968:101:12"
            },
            "returnParameters": {
              "id": 1481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9078:0:12"
            },
            "scope": 1640,
            "src": "8940:139:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1483,
              "nodeType": "StructuredDocumentation",
              "src": "9085:346:12",
              "text": " @notice Moves buyer's provided funds to buyer's balance.\n @dev Anybody can call this function.\n  Requires acceptsRefunds == true to proceed.\n  After updating buyer's balance, he/she can later withdraw.\n  Moves payment to REFUNDED state.\n @param paymentId The unique ID that identifies the payment."
            },
            "functionSelector": "7249fbb6",
            "id": 1488,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refund",
            "nameLocation": "9445:6:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1486,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1485,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "9460:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1488,
                  "src": "9452:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1484,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9452:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9451:19:12"
            },
            "returnParameters": {
              "id": 1487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9479:0:12"
            },
            "scope": 1640,
            "src": "9436:44:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1489,
              "nodeType": "StructuredDocumentation",
              "src": "9486:416:12",
              "text": " @notice Executes refund and withdraw in one transaction.\n @dev Anybody can call this function.\n  Requires acceptsRefunds == true to proceed.\n  All of msg.sender's balance in the contract is withdrawn,\n  not only the part that was locked in this particular paymentId\n  Moves payment to REFUNDED state.\n @param paymentId The unique ID that identifies the payment."
            },
            "functionSelector": "2593308b",
            "id": 1494,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refundAndWithdraw",
            "nameLocation": "9916:17:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1491,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "9942:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1494,
                  "src": "9934:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1490,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9934:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9933:19:12"
            },
            "returnParameters": {
              "id": 1493,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9961:0:12"
            },
            "scope": 1640,
            "src": "9907:55:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1495,
              "nodeType": "StructuredDocumentation",
              "src": "9968:115:12",
              "text": " @notice Transfers ERC20 avaliable in this\n  contract's balanceOf[msg.sender] to msg.sender"
            },
            "functionSelector": "3ccfd60b",
            "id": 1498,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "10097:8:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10105:2:12"
            },
            "returnParameters": {
              "id": 1497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10116:0:12"
            },
            "scope": 1640,
            "src": "10088:29:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1499,
              "nodeType": "StructuredDocumentation",
              "src": "10123:238:12",
              "text": " @notice Transfers only the specified ERC20 amount\n  from this contract's balanceOf[msg.sender] to msg.sender.\n  Reverts if balanceOf[msg.sender] < amount.\n @param amount The required amount to withdraw"
            },
            "functionSelector": "0562b9f7",
            "id": 1504,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawAmount",
            "nameLocation": "10375:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1501,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10398:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1504,
                  "src": "10390:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10390:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10389:16:12"
            },
            "returnParameters": {
              "id": 1503,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10414:0:12"
            },
            "scope": 1640,
            "src": "10366:49:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1505,
              "nodeType": "StructuredDocumentation",
              "src": "10444:193:12",
              "text": " @notice Returns whether sellers need to be registered to be able to accept payments\n @return Returns true if sellers need to be registered to be able to accept payments"
            },
            "functionSelector": "221a832e",
            "id": 1510,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isSellerRegistrationRequired",
            "nameLocation": "10651:28:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1506,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10679:2:12"
            },
            "returnParameters": {
              "id": 1509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1508,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1510,
                  "src": "10705:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1507,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10705:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10704:6:12"
            },
            "scope": 1640,
            "src": "10642:69:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1511,
              "nodeType": "StructuredDocumentation",
              "src": "10717:200:12",
              "text": " @notice Returns true if the address provided is a registered seller\n @param addr the address that is queried\n @return Returns whether the address is registered as seller"
            },
            "functionSelector": "78e96fb5",
            "id": 1518,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isRegisteredSeller",
            "nameLocation": "10931:18:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1513,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "10958:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1518,
                  "src": "10950:12:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1512,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10950:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10949:14:12"
            },
            "returnParameters": {
              "id": 1517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1516,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1518,
                  "src": "10987:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1515,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10987:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10986:6:12"
            },
            "scope": 1640,
            "src": "10922:71:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1519,
              "nodeType": "StructuredDocumentation",
              "src": "10999:169:12",
              "text": " @notice Returns the address of the ERC20 contract from which\n  tokens are accepted for payments\n @return the address of the ERC20 contract"
            },
            "functionSelector": "785e9e86",
            "id": 1524,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "erc20",
            "nameLocation": "11182:5:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1520,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11187:2:12"
            },
            "returnParameters": {
              "id": 1523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1522,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1524,
                  "src": "11213:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11213:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11212:9:12"
            },
            "scope": 1640,
            "src": "11173:49:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1525,
              "nodeType": "StructuredDocumentation",
              "src": "11228:240:12",
              "text": " @notice Returns the local ERC20 balance of the provided address\n  that is stored in this contract, and hence, available for withdrawal.\n @param addr the address that is queried\n @return the local balance"
            },
            "functionSelector": "70a08231",
            "id": 1532,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "11482:9:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1528,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1527,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "11500:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1532,
                  "src": "11492:12:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1526,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11492:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11491:14:12"
            },
            "returnParameters": {
              "id": 1531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1530,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1532,
                  "src": "11529:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1529,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11529:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11528:9:12"
            },
            "scope": 1640,
            "src": "11473:65:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1533,
              "nodeType": "StructuredDocumentation",
              "src": "11544:190:12",
              "text": " @notice Returns the ERC20 balance of address in the ERC20 contract\n @param addr the address that is queried\n @return the balance in the external ERC20 contract"
            },
            "functionSelector": "02519da3",
            "id": 1540,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "erc20BalanceOf",
            "nameLocation": "11748:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1536,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1535,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "11771:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1540,
                  "src": "11763:12:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1534,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11763:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11762:14:12"
            },
            "returnParameters": {
              "id": 1539,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1538,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1540,
                  "src": "11800:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1537,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11800:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11799:9:12"
            },
            "scope": 1640,
            "src": "11739:70:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1541,
              "nodeType": "StructuredDocumentation",
              "src": "11815:231:12",
              "text": " @notice Returns the allowance that the buyer has approved\n  directly in the ERC20 contract in favour of this contract.\n @param buyer the address of the buyer\n @return the amount allowed by buyer"
            },
            "functionSelector": "3e5beab9",
            "id": 1548,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "12060:9:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1543,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "12078:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1548,
                  "src": "12070:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1542,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12070:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12069:15:12"
            },
            "returnParameters": {
              "id": 1547,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1546,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1548,
                  "src": "12108:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1545,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12108:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12107:9:12"
            },
            "scope": 1640,
            "src": "12051:66:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1549,
              "nodeType": "StructuredDocumentation",
              "src": "12123:179:12",
              "text": " @notice Returns all data stored in a payment\n @param paymentId The unique ID that identifies the payment.\n @return the struct stored for the payment"
            },
            "functionSelector": "dd115ab2",
            "id": 1557,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "paymentInfo",
            "nameLocation": "12316:11:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1552,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1551,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "12336:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1557,
                  "src": "12328:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1550,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12328:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12327:19:12"
            },
            "returnParameters": {
              "id": 1556,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1555,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1557,
                  "src": "12394:14:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Payment_$1442_memory_ptr",
                    "typeString": "struct IPaymentsERC20.Payment"
                  },
                  "typeName": {
                    "id": 1554,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1553,
                      "name": "Payment",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1442,
                      "src": "12394:7:12"
                    },
                    "referencedDeclaration": 1442,
                    "src": "12394:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Payment_$1442_storage_ptr",
                      "typeString": "struct IPaymentsERC20.Payment"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12393:16:12"
            },
            "scope": 1640,
            "src": "12307:103:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1558,
              "nodeType": "StructuredDocumentation",
              "src": "12416:310:12",
              "text": " @notice Returns the state of a payment.\n @dev If payment is in ASSET_TRANSFERRING, it may be worth\n  checking acceptsRefunds to check if it has gone beyond expirationTime.\n @param paymentId The unique ID that identifies the payment.\n @return the state of the payment."
            },
            "functionSelector": "34b778ed",
            "id": 1566,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "paymentState",
            "nameLocation": "12740:12:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1560,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "12761:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1566,
                  "src": "12753:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1559,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12753:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12752:19:12"
            },
            "returnParameters": {
              "id": 1565,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1564,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1566,
                  "src": "12795:5:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$1424",
                    "typeString": "enum IPaymentsERC20.State"
                  },
                  "typeName": {
                    "id": 1563,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1562,
                      "name": "State",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1424,
                      "src": "12795:5:12"
                    },
                    "referencedDeclaration": 1424,
                    "src": "12795:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$1424",
                      "typeString": "enum IPaymentsERC20.State"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12794:7:12"
            },
            "scope": 1640,
            "src": "12731:71:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1567,
              "nodeType": "StructuredDocumentation",
              "src": "12808:298:12",
              "text": " @notice Returns true if the payment accepts a refund to the buyer\n @dev The payment must be in ASSET_TRANSFERRING and beyond expirationTime.\n @param paymentId The unique ID that identifies the payment.\n @return true if the payment accepts a refund to the buyer."
            },
            "functionSelector": "244aa5d7",
            "id": 1574,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "acceptsRefunds",
            "nameLocation": "13120:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1570,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1569,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "13143:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "13135:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1568,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13135:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13134:19:12"
            },
            "returnParameters": {
              "id": 1573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1572,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "13177:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1571,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "13177:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13176:6:12"
            },
            "scope": 1640,
            "src": "13111:72:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1575,
              "nodeType": "StructuredDocumentation",
              "src": "13189:200:12",
              "text": " @notice Returns the address of the of the contract containing\n  the implementation of the EIP712 verifying functions\n @return the address of the EIP712 verifier contract"
            },
            "functionSelector": "4bfc75fc",
            "id": 1580,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "EIP712Address",
            "nameLocation": "13403:13:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13416:2:12"
            },
            "returnParameters": {
              "id": 1579,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1578,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1580,
                  "src": "13442:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1577,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13442:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13441:9:12"
            },
            "scope": 1640,
            "src": "13394:57:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1581,
              "nodeType": "StructuredDocumentation",
              "src": "13457:226:12",
              "text": " @notice Returns the amount of seconds that a payment\n  can remain in ASSET_TRANSFERRING state without positive\n  or negative confirmation by the operator\n @return the payment window in secs"
            },
            "functionSelector": "cab55d56",
            "id": 1586,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "paymentWindow",
            "nameLocation": "13697:13:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1582,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13710:2:12"
            },
            "returnParameters": {
              "id": 1585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1584,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1586,
                  "src": "13736:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1583,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13736:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13735:9:12"
            },
            "scope": 1640,
            "src": "13688:57:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1587,
              "nodeType": "StructuredDocumentation",
              "src": "13751:143:12",
              "text": " @notice Returns a descriptor about the currency that this contract accepts\n @return the string describing the currency"
            },
            "functionSelector": "1c6d7675",
            "id": 1592,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "acceptedCurrency",
            "nameLocation": "13908:16:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1588,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13924:2:12"
            },
            "returnParameters": {
              "id": 1591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1590,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "13950:13:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1589,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13950:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13949:15:12"
            },
            "scope": 1640,
            "src": "13899:66:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1593,
              "nodeType": "StructuredDocumentation",
              "src": "13971:473:12",
              "text": " @notice Returns true if the 'amount' required for a payment is available to this contract.\n @dev In more detail: returns true if the sum of the buyer's local balance in this contract,\n  plus funds available and approved in the ERC20 contract, are larger or equal than 'amount'\n @param buyer The address for which funds are queried\n @param amount The amount that is queried\n @return Returns true if enough funds are available"
            },
            "functionSelector": "9cfd495c",
            "id": 1602,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "enoughFundsAvailable",
            "nameLocation": "14458:20:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1598,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "14487:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "14479:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14479:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1597,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "14502:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "14494:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1596,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14494:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14478:31:12"
            },
            "returnParameters": {
              "id": 1601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1600,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "14557:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1599,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14557:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14556:6:12"
            },
            "scope": 1640,
            "src": "14449:114:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1603,
              "nodeType": "StructuredDocumentation",
              "src": "14569:342:12",
              "text": " @notice Returns the maximum amount of funds available to a buyer\n @dev In more detail: returns the sum of the buyer's local balance in this contract,\n  plus the funds available and approved in the ERC20 contract.\n @param buyer The address for which funds are queried\n @return the max funds available"
            },
            "functionSelector": "c67eb9e5",
            "id": 1610,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "maxFundsAvailable",
            "nameLocation": "14925:17:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1606,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1605,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "14951:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1610,
                  "src": "14943:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1604,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14943:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14942:15:12"
            },
            "returnParameters": {
              "id": 1609,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1608,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1610,
                  "src": "14981:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1607,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14981:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14980:9:12"
            },
            "scope": 1640,
            "src": "14916:74:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1611,
              "nodeType": "StructuredDocumentation",
              "src": "14996:566:12",
              "text": " @notice Splits the funds required to pay 'amount' into two sources:\n  - externalFunds: the amount of ERC20 required to be transferred from the external ERC20 contract\n  - localFunds: the amount of ERC20 from the buyer's already available balance in this contract.\n @param buyer The address for which the amount is to be split\n @param amount The amount to be split\n @return externalFunds The amount of ERC20 required from the external ERC20 contract.\n @return localFunds The amount of ERC20 local funds required."
            },
            "functionSelector": "317cb018",
            "id": 1622,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "splitFundingSources",
            "nameLocation": "15576:19:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1616,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1613,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "15604:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15596:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1612,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15596:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1615,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "15619:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15611:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1614,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15611:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15595:31:12"
            },
            "returnParameters": {
              "id": 1621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1618,
                  "mutability": "mutable",
                  "name": "externalFunds",
                  "nameLocation": "15682:13:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15674:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1617,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15674:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1620,
                  "mutability": "mutable",
                  "name": "localFunds",
                  "nameLocation": "15705:10:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15697:18:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1619,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15697:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15673:43:12"
            },
            "scope": 1640,
            "src": "15567:150:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1623,
              "nodeType": "StructuredDocumentation",
              "src": "15723:190:12",
              "text": " @notice Reverts unless the requirements for a PaymentInput that\n  are common to both pay and relayedPay are fulfilled.\n @param payInput The PaymentInput struct"
            },
            "functionSelector": "caa3cecc",
            "id": 1629,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkPaymentInputs",
            "nameLocation": "15927:18:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1626,
                  "mutability": "mutable",
                  "name": "payInput",
                  "nameLocation": "15968:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1629,
                  "src": "15946:30:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInput_$1658_calldata_ptr",
                    "typeString": "struct ISignableStructs.PaymentInput"
                  },
                  "typeName": {
                    "id": 1625,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1624,
                      "name": "PaymentInput",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1658,
                      "src": "15946:12:12"
                    },
                    "referencedDeclaration": 1658,
                    "src": "15946:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInput_$1658_storage_ptr",
                      "typeString": "struct ISignableStructs.PaymentInput"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15945:32:12"
            },
            "returnParameters": {
              "id": 1628,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15991:0:12"
            },
            "scope": 1640,
            "src": "15918:74:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1630,
              "nodeType": "StructuredDocumentation",
              "src": "16021:396:12",
              "text": " @notice Safe computation of fee amount for a provided amount, feeBPS pair\n @dev Must return a value that is guaranteed to be less or equal to the provided amount\n @param amount The amount\n @param feeBPS The percentage fee expressed in Basis Points (bps).\n  feeBPS examples:  2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps\n @return The fee amount"
            },
            "functionSelector": "2af41be4",
            "id": 1639,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "computeFeeAmount",
            "nameLocation": "16431:16:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1635,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1632,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "16456:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "16448:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1631,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16448:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1634,
                  "mutability": "mutable",
                  "name": "feeBPS",
                  "nameLocation": "16472:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "16464:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1633,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16464:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16447:32:12"
            },
            "returnParameters": {
              "id": 1638,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1637,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "16527:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1636,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16527:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16526:9:12"
            },
            "scope": 1640,
            "src": "16422:114:12",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1641,
        "src": "2147:14391:12",
        "usedErrors": []
      }
    ],
    "src": "32:16507:12"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/Payments/IPaymentsERC20.sol",
    "exportedSymbols": {
      "IPaymentsERC20": [
        1640
      ],
      "ISignableStructs": [
        1664
      ]
    },
    "id": 1641,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1372,
        "literals": [
          "solidity",
          "=",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:12"
      },
      {
        "absolutePath": "project:/contracts/Payments/ISignableStructs.sol",
        "file": "./ISignableStructs.sol",
        "id": 1373,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1641,
        "sourceUnit": 1665,
        "src": "58:32:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1375,
              "name": "ISignableStructs",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1664,
              "src": "2175:16:12"
            },
            "id": 1376,
            "nodeType": "InheritanceSpecifier",
            "src": "2175:16:12"
          }
        ],
        "canonicalName": "IPaymentsERC20",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1374,
          "nodeType": "StructuredDocumentation",
          "src": "92:2053:12",
          "text": " @title Interface to Payments Contract in ERC20.\n @author Freeverse.io, www.freeverse.io\n @dev Upon transfer of ERC20 tokens to this contract, these remain\n locked until an Operator confirms the success or failure of the\n asset transfer required to fulfil this payment.\n If no confirmation is received from the operator during the PaymentWindow,\n all tokens received from the buyer are made available to the buyer for refund.\n To start a payment, one of the following two methods needs to be called:\n - in the 'pay' method, the buyer is the msg.sender (the buyer therefore signs the TX),\n   and the operator's EIP712-signature of the PaymentInput struct is provided as input to the call.\n - in the 'relayedPay' method, the operator is the msg.sender (the operator therefore signs the TX),\n   and the buyer's EIP712-signature of the PaymentInput struct is provided as input to the call.\n This contract maintains the balances of all users, it does not transfer them automatically.\n Users need to explicitly call the 'withdraw' method, which withdraws balanceOf[msg.sender]\n If a buyer has a non-zero local balance at the moment of starting a new payment,\n the contract reuses it, and only transfers the remainder required (if any)\n from the external ERC20 contract.\n Each payment has the following State Machine:\n - NOT_STARTED -> ASSET_TRANSFERRING, triggered by pay/relayedPay\n - ASSET_TRANSFERRING -> PAID, triggered by relaying assetTransferSuccess signed by operator\n - ASSET_TRANSFERRING -> REFUNDED, triggered by relaying assetTransferFailed signed by operator\n - ASSET_TRANSFERRING -> REFUNDED, triggered by a refund request after expirationTime\n NOTE: To ensure that the payment process proceeds as expected when the payment starts,\n upon acceptance of a pay/relayedPay, the following data: {operator, feesCollector, expirationTime}\n is stored in the payment struct, and used throughout the payment, regardless of\n any possible modifications to the contract's storage."
        },
        "fullyImplemented": false,
        "id": 1640,
        "linearizedBaseContracts": [
          1640,
          1664
        ],
        "name": "IPaymentsERC20",
        "nameLocation": "2157:14:12",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 1377,
              "nodeType": "StructuredDocumentation",
              "src": "2198:159:12",
              "text": " @dev Event emitted on change of EIP712 verifier contract address\n @param eip712address The address of the new EIP712 verifier contract"
            },
            "id": 1381,
            "name": "EIP712",
            "nameLocation": "2369:6:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1380,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1379,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "eip712address",
                  "nameLocation": "2384:13:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1381,
                  "src": "2376:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1378,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2376:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2375:23:12"
            },
            "src": "2363:36:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1382,
              "nodeType": "StructuredDocumentation",
              "src": "2404:243:12",
              "text": " @dev Event emitted on change of payment window\n @param window The new amount of time after the arrival of a payment for which, \n  in absence of confirmation of asset transfer success, a buyer is allowed to refund"
            },
            "id": 1386,
            "name": "PaymentWindow",
            "nameLocation": "2658:13:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1384,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "window",
                  "nameLocation": "2680:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1386,
                  "src": "2672:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1383,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2672:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2671:16:12"
            },
            "src": "2652:36:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1387,
              "nodeType": "StructuredDocumentation",
              "src": "2694:157:12",
              "text": " @dev Event emitted when a user executes the registerAsSeller method\n @param seller The address of the newly registeredAsSeller user."
            },
            "id": 1391,
            "name": "NewSeller",
            "nameLocation": "2862:9:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1389,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "seller",
                  "nameLocation": "2888:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1391,
                  "src": "2872:22:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1388,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2872:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2871:24:12"
            },
            "src": "2856:40:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1392,
              "nodeType": "StructuredDocumentation",
              "src": "2902:209:12",
              "text": " @dev Event emitted when a buyer is refunded for a given payment process\n @param paymentId The id of the already initiated payment \n @param buyer The address of the refunded buyer"
            },
            "id": 1398,
            "name": "BuyerRefunded",
            "nameLocation": "3122:13:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1397,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1394,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "3152:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1398,
                  "src": "3136:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1393,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3136:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1396,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "3179:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1398,
                  "src": "3163:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1395,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3163:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3135:50:12"
            },
            "src": "3116:70:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1399,
              "nodeType": "StructuredDocumentation",
              "src": "3192:280:12",
              "text": " @dev Event emitted when funds for a given payment arrive to this contract\n @param paymentId The unique id identifying the payment \n @param buyer The address of the buyer providing the funds\n @param seller The address of the seller of the asset"
            },
            "id": 1407,
            "name": "PayIn",
            "nameLocation": "3483:5:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1401,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "3514:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1407,
                  "src": "3498:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1400,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3498:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1403,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "3549:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1407,
                  "src": "3533:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1402,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3533:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1405,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "seller",
                  "nameLocation": "3580:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1407,
                  "src": "3564:22:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1404,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3564:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3488:104:12"
            },
            "src": "3477:116:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1408,
              "nodeType": "StructuredDocumentation",
              "src": "3599:204:12",
              "text": " @dev Event emitted when a payment process arrives at the PAID \n  final state, where the seller receives the funds.\n @param paymentId The id of the already initiated payment "
            },
            "id": 1412,
            "name": "Paid",
            "nameLocation": "3814:4:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1411,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1410,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "3835:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1412,
                  "src": "3819:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1409,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3819:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3818:27:12"
            },
            "src": "3808:38:12"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1413,
              "nodeType": "StructuredDocumentation",
              "src": "3852:218:12",
              "text": " @dev Event emitted when user withdraws funds from this contract\n @param user The address of the user that withdraws\n @param amount The amount withdrawn, in lowest units of the ERC20 token"
            },
            "id": 1419,
            "name": "Withdraw",
            "nameLocation": "4081:8:12",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1418,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1415,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "4106:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1419,
                  "src": "4090:20:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1414,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4090:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1417,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4120:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1419,
                  "src": "4112:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1416,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4112:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4089:38:12"
            },
            "src": "4075:53:12"
          },
          {
            "canonicalName": "IPaymentsERC20.State",
            "id": 1424,
            "members": [
              {
                "id": 1420,
                "name": "NotStarted",
                "nameLocation": "4248:10:12",
                "nodeType": "EnumValue",
                "src": "4248:10:12"
              },
              {
                "id": 1421,
                "name": "AssetTransferring",
                "nameLocation": "4268:17:12",
                "nodeType": "EnumValue",
                "src": "4268:17:12"
              },
              {
                "id": 1422,
                "name": "Refunded",
                "nameLocation": "4295:8:12",
                "nodeType": "EnumValue",
                "src": "4295:8:12"
              },
              {
                "id": 1423,
                "name": "Paid",
                "nameLocation": "4313:4:12",
                "nodeType": "EnumValue",
                "src": "4313:4:12"
              }
            ],
            "name": "State",
            "nameLocation": "4232:5:12",
            "nodeType": "EnumDefinition",
            "src": "4227:96:12"
          },
          {
            "canonicalName": "IPaymentsERC20.Payment",
            "id": 1442,
            "members": [
              {
                "constant": false,
                "id": 1427,
                "mutability": "mutable",
                "name": "state",
                "nameLocation": "4592:5:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4586:11:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_State_$1424",
                  "typeString": "enum IPaymentsERC20.State"
                },
                "typeName": {
                  "id": 1426,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1425,
                    "name": "State",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1424,
                    "src": "4586:5:12"
                  },
                  "referencedDeclaration": 1424,
                  "src": "4586:5:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$1424",
                    "typeString": "enum IPaymentsERC20.State"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1429,
                "mutability": "mutable",
                "name": "buyer",
                "nameLocation": "4732:5:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4724:13:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1428,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4724:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1431,
                "mutability": "mutable",
                "name": "seller",
                "nameLocation": "4883:6:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4875:14:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1430,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4875:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1433,
                "mutability": "mutable",
                "name": "operator",
                "nameLocation": "4963:8:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "4955:16:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1432,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4955:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1435,
                "mutability": "mutable",
                "name": "feesCollector",
                "nameLocation": "5050:13:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5042:21:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1434,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "5042:7:12",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1437,
                "mutability": "mutable",
                "name": "expirationTime",
                "nameLocation": "5215:14:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5207:22:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1436,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5207:7:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1439,
                "mutability": "mutable",
                "name": "feeBPS",
                "nameLocation": "5401:6:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5393:14:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1438,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5393:7:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1441,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "5532:6:12",
                "nodeType": "VariableDeclaration",
                "scope": 1442,
                "src": "5524:14:12",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1440,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5524:7:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Payment",
            "nameLocation": "4516:7:12",
            "nodeType": "StructDefinition",
            "scope": 1640,
            "src": "4509:1036:12",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 1443,
              "nodeType": "StructuredDocumentation",
              "src": "5551:202:12",
              "text": " @notice Registers msg.sender as seller so that, if the contract has set\n  _isSellerRegistrationRequired = true, then payments will be accepted with\n  msg.sender as seller."
            },
            "functionSelector": "128b8532",
            "id": 1446,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerAsSeller",
            "nameLocation": "5767:16:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5783:2:12"
            },
            "returnParameters": {
              "id": 1445,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5794:0:12"
            },
            "scope": 1640,
            "src": "5758:37:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1447,
              "nodeType": "StructuredDocumentation",
              "src": "5801:700:12",
              "text": " @notice Starts the Payment process via relay-by-operator.\n @dev Executed by an operator, who relays the MetaTX with the buyer's signature.\n  The buyer must have approved the amount to this contract before.\n  If all requirements are fulfilled, it stores the data relevant\n  for the next steps of the payment, and it locks the ERC20\n  in this contract.\n  Follows standard Checks-Effects-Interactions pattern\n  to protect against re-entrancy attacks.\n  Moves payment to ASSET_TRANSFERRING state.\n @param payInput The struct containing all required payment data\n @param buyerSignature The signature of 'payInput' by the buyer"
            },
            "functionSelector": "f7884d77",
            "id": 1455,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "relayedPay",
            "nameLocation": "6515:10:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1450,
                  "mutability": "mutable",
                  "name": "payInput",
                  "nameLocation": "6557:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "6535:30:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInput_$1658_calldata_ptr",
                    "typeString": "struct ISignableStructs.PaymentInput"
                  },
                  "typeName": {
                    "id": 1449,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1448,
                      "name": "PaymentInput",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1658,
                      "src": "6535:12:12"
                    },
                    "referencedDeclaration": 1658,
                    "src": "6535:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInput_$1658_storage_ptr",
                      "typeString": "struct ISignableStructs.PaymentInput"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1452,
                  "mutability": "mutable",
                  "name": "buyerSignature",
                  "nameLocation": "6590:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "6575:29:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1451,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "6575:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6525:85:12"
            },
            "returnParameters": {
              "id": 1454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6619:0:12"
            },
            "scope": 1640,
            "src": "6506:114:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1456,
              "nodeType": "StructuredDocumentation",
              "src": "6626:703:12",
              "text": " @notice Starts Payment process directly by the buyer.\n @dev Executed by the buyer, who relays the MetaTX with the operator's signature.\n  The buyer must have approved the amount to this contract before.\n  If all requirements are fulfilled, it stores the data relevant\n  for the next steps of the payment, and it locks the ERC20\n  in this contract.\n  Follows standard Checks-Effects-Interactions pattern\n  to protect against re-entrancy attacks.\n  Moves payment to ASSET_TRANSFERRING state.\n @param payInput The struct containing all required payment data\n @param operatorSignature The signature of 'payInput' by the operator"
            },
            "functionSelector": "23f7a900",
            "id": 1464,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pay",
            "nameLocation": "7343:3:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1459,
                  "mutability": "mutable",
                  "name": "payInput",
                  "nameLocation": "7369:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "7347:30:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInput_$1658_calldata_ptr",
                    "typeString": "struct ISignableStructs.PaymentInput"
                  },
                  "typeName": {
                    "id": 1458,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1457,
                      "name": "PaymentInput",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1658,
                      "src": "7347:12:12"
                    },
                    "referencedDeclaration": 1658,
                    "src": "7347:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInput_$1658_storage_ptr",
                      "typeString": "struct ISignableStructs.PaymentInput"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1461,
                  "mutability": "mutable",
                  "name": "operatorSignature",
                  "nameLocation": "7394:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "7379:32:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1460,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7379:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7346:66:12"
            },
            "returnParameters": {
              "id": 1463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7429:0:12"
            },
            "scope": 1640,
            "src": "7334:96:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1465,
              "nodeType": "StructuredDocumentation",
              "src": "7436:598:12",
              "text": " @notice Relays the operator signature declaring that the asset transfer was successful or failed,\n  and updates balances of seller or buyer, respectively.\n @dev Can be executed by anyone, but the operator signature must be included as input param.\n  Seller or Buyer's balances are updated, allowing explicit withdrawal.\n  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\n @param transferResult The asset transfer result struct signed by the operator.\n @param operatorSignature The operator signature of result"
            },
            "functionSelector": "96aa71b0",
            "id": 1473,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nameLocation": "8048:8:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1468,
                  "mutability": "mutable",
                  "name": "transferResult",
                  "nameLocation": "8095:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "8066:43:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AssetTransferResult_$1663_calldata_ptr",
                    "typeString": "struct ISignableStructs.AssetTransferResult"
                  },
                  "typeName": {
                    "id": 1467,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1466,
                      "name": "AssetTransferResult",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1663,
                      "src": "8066:19:12"
                    },
                    "referencedDeclaration": 1663,
                    "src": "8066:19:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AssetTransferResult_$1663_storage_ptr",
                      "typeString": "struct ISignableStructs.AssetTransferResult"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1470,
                  "mutability": "mutable",
                  "name": "operatorSignature",
                  "nameLocation": "8134:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "8119:32:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1469,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8119:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8056:101:12"
            },
            "returnParameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8166:0:12"
            },
            "scope": 1640,
            "src": "8039:128:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1474,
              "nodeType": "StructuredDocumentation",
              "src": "8173:762:12",
              "text": " @notice Relays the operator signature declaring that the asset transfer was successful or failed,\n  updates balances of seller or buyer, respectively,\n  and proceeds to withdraw all funds in this contract available to msg.sender.\n @dev Can be executed by anyone, but the operator signature must be included as input param.\n  It is, however, expected to be executed by the seller, in case of a successful asset transfer,\n  or the buyer, in case of a failed asset transfer.\n  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.\n @param transferResult The asset transfer result struct signed by the operator.\n @param operatorSignature The operator signature of result"
            },
            "functionSelector": "a1bc474d",
            "id": 1482,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeAndWithdraw",
            "nameLocation": "8949:19:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1477,
                  "mutability": "mutable",
                  "name": "transferResult",
                  "nameLocation": "9007:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1482,
                  "src": "8978:43:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AssetTransferResult_$1663_calldata_ptr",
                    "typeString": "struct ISignableStructs.AssetTransferResult"
                  },
                  "typeName": {
                    "id": 1476,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1475,
                      "name": "AssetTransferResult",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1663,
                      "src": "8978:19:12"
                    },
                    "referencedDeclaration": 1663,
                    "src": "8978:19:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AssetTransferResult_$1663_storage_ptr",
                      "typeString": "struct ISignableStructs.AssetTransferResult"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1479,
                  "mutability": "mutable",
                  "name": "operatorSignature",
                  "nameLocation": "9046:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1482,
                  "src": "9031:32:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1478,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9031:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8968:101:12"
            },
            "returnParameters": {
              "id": 1481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9078:0:12"
            },
            "scope": 1640,
            "src": "8940:139:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1483,
              "nodeType": "StructuredDocumentation",
              "src": "9085:346:12",
              "text": " @notice Moves buyer's provided funds to buyer's balance.\n @dev Anybody can call this function.\n  Requires acceptsRefunds == true to proceed.\n  After updating buyer's balance, he/she can later withdraw.\n  Moves payment to REFUNDED state.\n @param paymentId The unique ID that identifies the payment."
            },
            "functionSelector": "7249fbb6",
            "id": 1488,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refund",
            "nameLocation": "9445:6:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1486,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1485,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "9460:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1488,
                  "src": "9452:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1484,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9452:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9451:19:12"
            },
            "returnParameters": {
              "id": 1487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9479:0:12"
            },
            "scope": 1640,
            "src": "9436:44:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1489,
              "nodeType": "StructuredDocumentation",
              "src": "9486:416:12",
              "text": " @notice Executes refund and withdraw in one transaction.\n @dev Anybody can call this function.\n  Requires acceptsRefunds == true to proceed.\n  All of msg.sender's balance in the contract is withdrawn,\n  not only the part that was locked in this particular paymentId\n  Moves payment to REFUNDED state.\n @param paymentId The unique ID that identifies the payment."
            },
            "functionSelector": "2593308b",
            "id": 1494,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refundAndWithdraw",
            "nameLocation": "9916:17:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1491,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "9942:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1494,
                  "src": "9934:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1490,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9934:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9933:19:12"
            },
            "returnParameters": {
              "id": 1493,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9961:0:12"
            },
            "scope": 1640,
            "src": "9907:55:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1495,
              "nodeType": "StructuredDocumentation",
              "src": "9968:115:12",
              "text": " @notice Transfers ERC20 avaliable in this\n  contract's balanceOf[msg.sender] to msg.sender"
            },
            "functionSelector": "3ccfd60b",
            "id": 1498,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "10097:8:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10105:2:12"
            },
            "returnParameters": {
              "id": 1497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10116:0:12"
            },
            "scope": 1640,
            "src": "10088:29:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1499,
              "nodeType": "StructuredDocumentation",
              "src": "10123:238:12",
              "text": " @notice Transfers only the specified ERC20 amount\n  from this contract's balanceOf[msg.sender] to msg.sender.\n  Reverts if balanceOf[msg.sender] < amount.\n @param amount The required amount to withdraw"
            },
            "functionSelector": "0562b9f7",
            "id": 1504,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawAmount",
            "nameLocation": "10375:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1501,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10398:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1504,
                  "src": "10390:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10390:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10389:16:12"
            },
            "returnParameters": {
              "id": 1503,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10414:0:12"
            },
            "scope": 1640,
            "src": "10366:49:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1505,
              "nodeType": "StructuredDocumentation",
              "src": "10444:193:12",
              "text": " @notice Returns whether sellers need to be registered to be able to accept payments\n @return Returns true if sellers need to be registered to be able to accept payments"
            },
            "functionSelector": "221a832e",
            "id": 1510,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isSellerRegistrationRequired",
            "nameLocation": "10651:28:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1506,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10679:2:12"
            },
            "returnParameters": {
              "id": 1509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1508,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1510,
                  "src": "10705:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1507,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10705:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10704:6:12"
            },
            "scope": 1640,
            "src": "10642:69:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1511,
              "nodeType": "StructuredDocumentation",
              "src": "10717:200:12",
              "text": " @notice Returns true if the address provided is a registered seller\n @param addr the address that is queried\n @return Returns whether the address is registered as seller"
            },
            "functionSelector": "78e96fb5",
            "id": 1518,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isRegisteredSeller",
            "nameLocation": "10931:18:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1513,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "10958:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1518,
                  "src": "10950:12:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1512,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10950:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10949:14:12"
            },
            "returnParameters": {
              "id": 1517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1516,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1518,
                  "src": "10987:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1515,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10987:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10986:6:12"
            },
            "scope": 1640,
            "src": "10922:71:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1519,
              "nodeType": "StructuredDocumentation",
              "src": "10999:169:12",
              "text": " @notice Returns the address of the ERC20 contract from which\n  tokens are accepted for payments\n @return the address of the ERC20 contract"
            },
            "functionSelector": "785e9e86",
            "id": 1524,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "erc20",
            "nameLocation": "11182:5:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1520,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11187:2:12"
            },
            "returnParameters": {
              "id": 1523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1522,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1524,
                  "src": "11213:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11213:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11212:9:12"
            },
            "scope": 1640,
            "src": "11173:49:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1525,
              "nodeType": "StructuredDocumentation",
              "src": "11228:240:12",
              "text": " @notice Returns the local ERC20 balance of the provided address\n  that is stored in this contract, and hence, available for withdrawal.\n @param addr the address that is queried\n @return the local balance"
            },
            "functionSelector": "70a08231",
            "id": 1532,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "11482:9:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1528,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1527,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "11500:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1532,
                  "src": "11492:12:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1526,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11492:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11491:14:12"
            },
            "returnParameters": {
              "id": 1531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1530,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1532,
                  "src": "11529:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1529,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11529:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11528:9:12"
            },
            "scope": 1640,
            "src": "11473:65:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1533,
              "nodeType": "StructuredDocumentation",
              "src": "11544:190:12",
              "text": " @notice Returns the ERC20 balance of address in the ERC20 contract\n @param addr the address that is queried\n @return the balance in the external ERC20 contract"
            },
            "functionSelector": "02519da3",
            "id": 1540,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "erc20BalanceOf",
            "nameLocation": "11748:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1536,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1535,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "11771:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1540,
                  "src": "11763:12:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1534,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11763:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11762:14:12"
            },
            "returnParameters": {
              "id": 1539,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1538,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1540,
                  "src": "11800:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1537,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11800:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11799:9:12"
            },
            "scope": 1640,
            "src": "11739:70:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1541,
              "nodeType": "StructuredDocumentation",
              "src": "11815:231:12",
              "text": " @notice Returns the allowance that the buyer has approved\n  directly in the ERC20 contract in favour of this contract.\n @param buyer the address of the buyer\n @return the amount allowed by buyer"
            },
            "functionSelector": "3e5beab9",
            "id": 1548,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "12060:9:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1543,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "12078:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1548,
                  "src": "12070:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1542,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12070:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12069:15:12"
            },
            "returnParameters": {
              "id": 1547,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1546,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1548,
                  "src": "12108:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1545,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12108:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12107:9:12"
            },
            "scope": 1640,
            "src": "12051:66:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1549,
              "nodeType": "StructuredDocumentation",
              "src": "12123:179:12",
              "text": " @notice Returns all data stored in a payment\n @param paymentId The unique ID that identifies the payment.\n @return the struct stored for the payment"
            },
            "functionSelector": "dd115ab2",
            "id": 1557,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "paymentInfo",
            "nameLocation": "12316:11:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1552,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1551,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "12336:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1557,
                  "src": "12328:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1550,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12328:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12327:19:12"
            },
            "returnParameters": {
              "id": 1556,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1555,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1557,
                  "src": "12394:14:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Payment_$1442_memory_ptr",
                    "typeString": "struct IPaymentsERC20.Payment"
                  },
                  "typeName": {
                    "id": 1554,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1553,
                      "name": "Payment",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1442,
                      "src": "12394:7:12"
                    },
                    "referencedDeclaration": 1442,
                    "src": "12394:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Payment_$1442_storage_ptr",
                      "typeString": "struct IPaymentsERC20.Payment"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12393:16:12"
            },
            "scope": 1640,
            "src": "12307:103:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1558,
              "nodeType": "StructuredDocumentation",
              "src": "12416:310:12",
              "text": " @notice Returns the state of a payment.\n @dev If payment is in ASSET_TRANSFERRING, it may be worth\n  checking acceptsRefunds to check if it has gone beyond expirationTime.\n @param paymentId The unique ID that identifies the payment.\n @return the state of the payment."
            },
            "functionSelector": "34b778ed",
            "id": 1566,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "paymentState",
            "nameLocation": "12740:12:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1560,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "12761:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1566,
                  "src": "12753:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1559,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12753:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12752:19:12"
            },
            "returnParameters": {
              "id": 1565,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1564,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1566,
                  "src": "12795:5:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$1424",
                    "typeString": "enum IPaymentsERC20.State"
                  },
                  "typeName": {
                    "id": 1563,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1562,
                      "name": "State",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1424,
                      "src": "12795:5:12"
                    },
                    "referencedDeclaration": 1424,
                    "src": "12795:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$1424",
                      "typeString": "enum IPaymentsERC20.State"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12794:7:12"
            },
            "scope": 1640,
            "src": "12731:71:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1567,
              "nodeType": "StructuredDocumentation",
              "src": "12808:298:12",
              "text": " @notice Returns true if the payment accepts a refund to the buyer\n @dev The payment must be in ASSET_TRANSFERRING and beyond expirationTime.\n @param paymentId The unique ID that identifies the payment.\n @return true if the payment accepts a refund to the buyer."
            },
            "functionSelector": "244aa5d7",
            "id": 1574,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "acceptsRefunds",
            "nameLocation": "13120:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1570,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1569,
                  "mutability": "mutable",
                  "name": "paymentId",
                  "nameLocation": "13143:9:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "13135:17:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1568,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13135:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13134:19:12"
            },
            "returnParameters": {
              "id": 1573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1572,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1574,
                  "src": "13177:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1571,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "13177:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13176:6:12"
            },
            "scope": 1640,
            "src": "13111:72:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1575,
              "nodeType": "StructuredDocumentation",
              "src": "13189:200:12",
              "text": " @notice Returns the address of the of the contract containing\n  the implementation of the EIP712 verifying functions\n @return the address of the EIP712 verifier contract"
            },
            "functionSelector": "4bfc75fc",
            "id": 1580,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "EIP712Address",
            "nameLocation": "13403:13:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13416:2:12"
            },
            "returnParameters": {
              "id": 1579,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1578,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1580,
                  "src": "13442:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1577,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13442:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13441:9:12"
            },
            "scope": 1640,
            "src": "13394:57:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1581,
              "nodeType": "StructuredDocumentation",
              "src": "13457:226:12",
              "text": " @notice Returns the amount of seconds that a payment\n  can remain in ASSET_TRANSFERRING state without positive\n  or negative confirmation by the operator\n @return the payment window in secs"
            },
            "functionSelector": "cab55d56",
            "id": 1586,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "paymentWindow",
            "nameLocation": "13697:13:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1582,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13710:2:12"
            },
            "returnParameters": {
              "id": 1585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1584,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1586,
                  "src": "13736:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1583,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13736:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13735:9:12"
            },
            "scope": 1640,
            "src": "13688:57:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1587,
              "nodeType": "StructuredDocumentation",
              "src": "13751:143:12",
              "text": " @notice Returns a descriptor about the currency that this contract accepts\n @return the string describing the currency"
            },
            "functionSelector": "1c6d7675",
            "id": 1592,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "acceptedCurrency",
            "nameLocation": "13908:16:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1588,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13924:2:12"
            },
            "returnParameters": {
              "id": 1591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1590,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "13950:13:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1589,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13950:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13949:15:12"
            },
            "scope": 1640,
            "src": "13899:66:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1593,
              "nodeType": "StructuredDocumentation",
              "src": "13971:473:12",
              "text": " @notice Returns true if the 'amount' required for a payment is available to this contract.\n @dev In more detail: returns true if the sum of the buyer's local balance in this contract,\n  plus funds available and approved in the ERC20 contract, are larger or equal than 'amount'\n @param buyer The address for which funds are queried\n @param amount The amount that is queried\n @return Returns true if enough funds are available"
            },
            "functionSelector": "9cfd495c",
            "id": 1602,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "enoughFundsAvailable",
            "nameLocation": "14458:20:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1598,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "14487:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "14479:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14479:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1597,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "14502:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "14494:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1596,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14494:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14478:31:12"
            },
            "returnParameters": {
              "id": 1601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1600,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "14557:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1599,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14557:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14556:6:12"
            },
            "scope": 1640,
            "src": "14449:114:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1603,
              "nodeType": "StructuredDocumentation",
              "src": "14569:342:12",
              "text": " @notice Returns the maximum amount of funds available to a buyer\n @dev In more detail: returns the sum of the buyer's local balance in this contract,\n  plus the funds available and approved in the ERC20 contract.\n @param buyer The address for which funds are queried\n @return the max funds available"
            },
            "functionSelector": "c67eb9e5",
            "id": 1610,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "maxFundsAvailable",
            "nameLocation": "14925:17:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1606,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1605,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "14951:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1610,
                  "src": "14943:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1604,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14943:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14942:15:12"
            },
            "returnParameters": {
              "id": 1609,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1608,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1610,
                  "src": "14981:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1607,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14981:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14980:9:12"
            },
            "scope": 1640,
            "src": "14916:74:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1611,
              "nodeType": "StructuredDocumentation",
              "src": "14996:566:12",
              "text": " @notice Splits the funds required to pay 'amount' into two sources:\n  - externalFunds: the amount of ERC20 required to be transferred from the external ERC20 contract\n  - localFunds: the amount of ERC20 from the buyer's already available balance in this contract.\n @param buyer The address for which the amount is to be split\n @param amount The amount to be split\n @return externalFunds The amount of ERC20 required from the external ERC20 contract.\n @return localFunds The amount of ERC20 local funds required."
            },
            "functionSelector": "317cb018",
            "id": 1622,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "splitFundingSources",
            "nameLocation": "15576:19:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1616,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1613,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "15604:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15596:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1612,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15596:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1615,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "15619:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15611:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1614,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15611:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15595:31:12"
            },
            "returnParameters": {
              "id": 1621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1618,
                  "mutability": "mutable",
                  "name": "externalFunds",
                  "nameLocation": "15682:13:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15674:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1617,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15674:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1620,
                  "mutability": "mutable",
                  "name": "localFunds",
                  "nameLocation": "15705:10:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1622,
                  "src": "15697:18:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1619,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15697:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15673:43:12"
            },
            "scope": 1640,
            "src": "15567:150:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1623,
              "nodeType": "StructuredDocumentation",
              "src": "15723:190:12",
              "text": " @notice Reverts unless the requirements for a PaymentInput that\n  are common to both pay and relayedPay are fulfilled.\n @param payInput The PaymentInput struct"
            },
            "functionSelector": "caa3cecc",
            "id": 1629,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkPaymentInputs",
            "nameLocation": "15927:18:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1626,
                  "mutability": "mutable",
                  "name": "payInput",
                  "nameLocation": "15968:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1629,
                  "src": "15946:30:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInput_$1658_calldata_ptr",
                    "typeString": "struct ISignableStructs.PaymentInput"
                  },
                  "typeName": {
                    "id": 1625,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1624,
                      "name": "PaymentInput",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1658,
                      "src": "15946:12:12"
                    },
                    "referencedDeclaration": 1658,
                    "src": "15946:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInput_$1658_storage_ptr",
                      "typeString": "struct ISignableStructs.PaymentInput"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15945:32:12"
            },
            "returnParameters": {
              "id": 1628,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15991:0:12"
            },
            "scope": 1640,
            "src": "15918:74:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1630,
              "nodeType": "StructuredDocumentation",
              "src": "16021:396:12",
              "text": " @notice Safe computation of fee amount for a provided amount, feeBPS pair\n @dev Must return a value that is guaranteed to be less or equal to the provided amount\n @param amount The amount\n @param feeBPS The percentage fee expressed in Basis Points (bps).\n  feeBPS examples:  2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps\n @return The fee amount"
            },
            "functionSelector": "2af41be4",
            "id": 1639,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "computeFeeAmount",
            "nameLocation": "16431:16:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1635,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1632,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "16456:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "16448:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1631,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16448:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1634,
                  "mutability": "mutable",
                  "name": "feeBPS",
                  "nameLocation": "16472:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "16464:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1633,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16464:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16447:32:12"
            },
            "returnParameters": {
              "id": 1638,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1637,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "16527:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1636,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16527:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16526:9:12"
            },
            "scope": 1640,
            "src": "16422:114:12",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1641,
        "src": "2147:14391:12",
        "usedErrors": []
      }
    ],
    "src": "32:16507:12"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.12+commit.f00d7308.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-05-27T10:46:47.122Z",
  "devdoc": {
    "author": "Freeverse.io, www.freeverse.io",
    "details": "Upon transfer of ERC20 tokens to this contract, these remain locked until an Operator confirms the success or failure of the asset transfer required to fulfil this payment. If no confirmation is received from the operator during the PaymentWindow, all tokens received from the buyer are made available to the buyer for refund. To start a payment, one of the following two methods needs to be called: - in the 'pay' method, the buyer is the msg.sender (the buyer therefore signs the TX),   and the operator's EIP712-signature of the PaymentInput struct is provided as input to the call. - in the 'relayedPay' method, the operator is the msg.sender (the operator therefore signs the TX),   and the buyer's EIP712-signature of the PaymentInput struct is provided as input to the call. This contract maintains the balances of all users, it does not transfer them automatically. Users need to explicitly call the 'withdraw' method, which withdraws balanceOf[msg.sender] If a buyer has a non-zero local balance at the moment of starting a new payment, the contract reuses it, and only transfers the remainder required (if any) from the external ERC20 contract. Each payment has the following State Machine: - NOT_STARTED -> ASSET_TRANSFERRING, triggered by pay/relayedPay - ASSET_TRANSFERRING -> PAID, triggered by relaying assetTransferSuccess signed by operator - ASSET_TRANSFERRING -> REFUNDED, triggered by relaying assetTransferFailed signed by operator - ASSET_TRANSFERRING -> REFUNDED, triggered by a refund request after expirationTime NOTE: To ensure that the payment process proceeds as expected when the payment starts, upon acceptance of a pay/relayedPay, the following data: {operator, feesCollector, expirationTime} is stored in the payment struct, and used throughout the payment, regardless of any possible modifications to the contract's storage.",
    "events": {
      "BuyerRefunded(bytes32,address)": {
        "details": "Event emitted when a buyer is refunded for a given payment process",
        "params": {
          "buyer": "The address of the refunded buyer",
          "paymentId": "The id of the already initiated payment "
        }
      },
      "EIP712(address)": {
        "details": "Event emitted on change of EIP712 verifier contract address",
        "params": {
          "eip712address": "The address of the new EIP712 verifier contract"
        }
      },
      "NewSeller(address)": {
        "details": "Event emitted when a user executes the registerAsSeller method",
        "params": {
          "seller": "The address of the newly registeredAsSeller user."
        }
      },
      "Paid(bytes32)": {
        "details": "Event emitted when a payment process arrives at the PAID   final state, where the seller receives the funds.",
        "params": {
          "paymentId": "The id of the already initiated payment "
        }
      },
      "PayIn(bytes32,address,address)": {
        "details": "Event emitted when funds for a given payment arrive to this contract",
        "params": {
          "buyer": "The address of the buyer providing the funds",
          "paymentId": "The unique id identifying the payment ",
          "seller": "The address of the seller of the asset"
        }
      },
      "PaymentWindow(uint256)": {
        "details": "Event emitted on change of payment window",
        "params": {
          "window": "The new amount of time after the arrival of a payment for which,   in absence of confirmation of asset transfer success, a buyer is allowed to refund"
        }
      },
      "Withdraw(address,uint256)": {
        "details": "Event emitted when user withdraws funds from this contract",
        "params": {
          "amount": "The amount withdrawn, in lowest units of the ERC20 token",
          "user": "The address of the user that withdraws"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "EIP712Address()": {
        "returns": {
          "_0": "the address of the EIP712 verifier contract"
        }
      },
      "acceptedCurrency()": {
        "returns": {
          "_0": "the string describing the currency"
        }
      },
      "acceptsRefunds(bytes32)": {
        "details": "The payment must be in ASSET_TRANSFERRING and beyond expirationTime.",
        "params": {
          "paymentId": "The unique ID that identifies the payment."
        },
        "returns": {
          "_0": "true if the payment accepts a refund to the buyer."
        }
      },
      "allowance(address)": {
        "params": {
          "buyer": "the address of the buyer"
        },
        "returns": {
          "_0": "the amount allowed by buyer"
        }
      },
      "balanceOf(address)": {
        "params": {
          "addr": "the address that is queried"
        },
        "returns": {
          "_0": "the local balance"
        }
      },
      "checkPaymentInputs((bytes32,uint256,uint256,uint256,uint256,address,address))": {
        "params": {
          "payInput": "The PaymentInput struct"
        }
      },
      "computeFeeAmount(uint256,uint256)": {
        "details": "Must return a value that is guaranteed to be less or equal to the provided amount",
        "params": {
          "amount": "The amount",
          "feeBPS": "The percentage fee expressed in Basis Points (bps).  feeBPS examples:  2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps"
        },
        "returns": {
          "_0": "The fee amount"
        }
      },
      "enoughFundsAvailable(address,uint256)": {
        "details": "In more detail: returns true if the sum of the buyer's local balance in this contract,  plus funds available and approved in the ERC20 contract, are larger or equal than 'amount'",
        "params": {
          "amount": "The amount that is queried",
          "buyer": "The address for which funds are queried"
        },
        "returns": {
          "_0": "Returns true if enough funds are available"
        }
      },
      "erc20()": {
        "returns": {
          "_0": "the address of the ERC20 contract"
        }
      },
      "erc20BalanceOf(address)": {
        "params": {
          "addr": "the address that is queried"
        },
        "returns": {
          "_0": "the balance in the external ERC20 contract"
        }
      },
      "finalize((bytes32,bool),bytes)": {
        "details": "Can be executed by anyone, but the operator signature must be included as input param.  Seller or Buyer's balances are updated, allowing explicit withdrawal.  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.",
        "params": {
          "operatorSignature": "The operator signature of result",
          "transferResult": "The asset transfer result struct signed by the operator."
        }
      },
      "finalizeAndWithdraw((bytes32,bool),bytes)": {
        "details": "Can be executed by anyone, but the operator signature must be included as input param.  It is, however, expected to be executed by the seller, in case of a successful asset transfer,  or the buyer, in case of a failed asset transfer.  Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.",
        "params": {
          "operatorSignature": "The operator signature of result",
          "transferResult": "The asset transfer result struct signed by the operator."
        }
      },
      "isRegisteredSeller(address)": {
        "params": {
          "addr": "the address that is queried"
        },
        "returns": {
          "_0": "Returns whether the address is registered as seller"
        }
      },
      "isSellerRegistrationRequired()": {
        "returns": {
          "_0": "Returns true if sellers need to be registered to be able to accept payments"
        }
      },
      "maxFundsAvailable(address)": {
        "details": "In more detail: returns the sum of the buyer's local balance in this contract,  plus the funds available and approved in the ERC20 contract.",
        "params": {
          "buyer": "The address for which funds are queried"
        },
        "returns": {
          "_0": "the max funds available"
        }
      },
      "pay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)": {
        "details": "Executed by the buyer, who relays the MetaTX with the operator's signature.  The buyer must have approved the amount to this contract before.  If all requirements are fulfilled, it stores the data relevant  for the next steps of the payment, and it locks the ERC20  in this contract.  Follows standard Checks-Effects-Interactions pattern  to protect against re-entrancy attacks.  Moves payment to ASSET_TRANSFERRING state.",
        "params": {
          "operatorSignature": "The signature of 'payInput' by the operator",
          "payInput": "The struct containing all required payment data"
        }
      },
      "paymentInfo(bytes32)": {
        "params": {
          "paymentId": "The unique ID that identifies the payment."
        },
        "returns": {
          "_0": "the struct stored for the payment"
        }
      },
      "paymentState(bytes32)": {
        "details": "If payment is in ASSET_TRANSFERRING, it may be worth  checking acceptsRefunds to check if it has gone beyond expirationTime.",
        "params": {
          "paymentId": "The unique ID that identifies the payment."
        },
        "returns": {
          "_0": "the state of the payment."
        }
      },
      "paymentWindow()": {
        "returns": {
          "_0": "the payment window in secs"
        }
      },
      "refund(bytes32)": {
        "details": "Anybody can call this function.  Requires acceptsRefunds == true to proceed.  After updating buyer's balance, he/she can later withdraw.  Moves payment to REFUNDED state.",
        "params": {
          "paymentId": "The unique ID that identifies the payment."
        }
      },
      "refundAndWithdraw(bytes32)": {
        "details": "Anybody can call this function.  Requires acceptsRefunds == true to proceed.  All of msg.sender's balance in the contract is withdrawn,  not only the part that was locked in this particular paymentId  Moves payment to REFUNDED state.",
        "params": {
          "paymentId": "The unique ID that identifies the payment."
        }
      },
      "relayedPay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)": {
        "details": "Executed by an operator, who relays the MetaTX with the buyer's signature.  The buyer must have approved the amount to this contract before.  If all requirements are fulfilled, it stores the data relevant  for the next steps of the payment, and it locks the ERC20  in this contract.  Follows standard Checks-Effects-Interactions pattern  to protect against re-entrancy attacks.  Moves payment to ASSET_TRANSFERRING state.",
        "params": {
          "buyerSignature": "The signature of 'payInput' by the buyer",
          "payInput": "The struct containing all required payment data"
        }
      },
      "splitFundingSources(address,uint256)": {
        "params": {
          "amount": "The amount to be split",
          "buyer": "The address for which the amount is to be split"
        },
        "returns": {
          "externalFunds": "The amount of ERC20 required from the external ERC20 contract.",
          "localFunds": "The amount of ERC20 local funds required."
        }
      },
      "withdrawAmount(uint256)": {
        "params": {
          "amount": "The required amount to withdraw"
        }
      }
    },
    "title": "Interface to Payments Contract in ERC20.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "EIP712Address()": {
        "notice": "Returns the address of the of the contract containing  the implementation of the EIP712 verifying functions"
      },
      "acceptedCurrency()": {
        "notice": "Returns a descriptor about the currency that this contract accepts"
      },
      "acceptsRefunds(bytes32)": {
        "notice": "Returns true if the payment accepts a refund to the buyer"
      },
      "allowance(address)": {
        "notice": "Returns the allowance that the buyer has approved  directly in the ERC20 contract in favour of this contract."
      },
      "balanceOf(address)": {
        "notice": "Returns the local ERC20 balance of the provided address  that is stored in this contract, and hence, available for withdrawal."
      },
      "checkPaymentInputs((bytes32,uint256,uint256,uint256,uint256,address,address))": {
        "notice": "Reverts unless the requirements for a PaymentInput that  are common to both pay and relayedPay are fulfilled."
      },
      "computeFeeAmount(uint256,uint256)": {
        "notice": "Safe computation of fee amount for a provided amount, feeBPS pair"
      },
      "enoughFundsAvailable(address,uint256)": {
        "notice": "Returns true if the 'amount' required for a payment is available to this contract."
      },
      "erc20()": {
        "notice": "Returns the address of the ERC20 contract from which  tokens are accepted for payments"
      },
      "erc20BalanceOf(address)": {
        "notice": "Returns the ERC20 balance of address in the ERC20 contract"
      },
      "finalize((bytes32,bool),bytes)": {
        "notice": "Relays the operator signature declaring that the asset transfer was successful or failed,  and updates balances of seller or buyer, respectively."
      },
      "finalizeAndWithdraw((bytes32,bool),bytes)": {
        "notice": "Relays the operator signature declaring that the asset transfer was successful or failed,  updates balances of seller or buyer, respectively,  and proceeds to withdraw all funds in this contract available to msg.sender."
      },
      "isRegisteredSeller(address)": {
        "notice": "Returns true if the address provided is a registered seller"
      },
      "isSellerRegistrationRequired()": {
        "notice": "Returns whether sellers need to be registered to be able to accept payments"
      },
      "maxFundsAvailable(address)": {
        "notice": "Returns the maximum amount of funds available to a buyer"
      },
      "pay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)": {
        "notice": "Starts Payment process directly by the buyer."
      },
      "paymentInfo(bytes32)": {
        "notice": "Returns all data stored in a payment"
      },
      "paymentState(bytes32)": {
        "notice": "Returns the state of a payment."
      },
      "paymentWindow()": {
        "notice": "Returns the amount of seconds that a payment  can remain in ASSET_TRANSFERRING state without positive  or negative confirmation by the operator"
      },
      "refund(bytes32)": {
        "notice": "Moves buyer's provided funds to buyer's balance."
      },
      "refundAndWithdraw(bytes32)": {
        "notice": "Executes refund and withdraw in one transaction."
      },
      "registerAsSeller()": {
        "notice": "Registers msg.sender as seller so that, if the contract has set  _isSellerRegistrationRequired = true, then payments will be accepted with  msg.sender as seller."
      },
      "relayedPay((bytes32,uint256,uint256,uint256,uint256,address,address),bytes)": {
        "notice": "Starts the Payment process via relay-by-operator."
      },
      "splitFundingSources(address,uint256)": {
        "notice": "Splits the funds required to pay 'amount' into two sources:  - externalFunds: the amount of ERC20 required to be transferred from the external ERC20 contract  - localFunds: the amount of ERC20 from the buyer's already available balance in this contract."
      },
      "withdraw()": {
        "notice": "Transfers ERC20 avaliable in this  contract's balanceOf[msg.sender] to msg.sender"
      },
      "withdrawAmount(uint256)": {
        "notice": "Transfers only the specified ERC20 amount  from this contract's balanceOf[msg.sender] to msg.sender.  Reverts if balanceOf[msg.sender] < amount."
      }
    },
    "version": 1
  }
}